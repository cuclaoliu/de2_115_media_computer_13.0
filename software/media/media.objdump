
media.elf:     file format elf32-littlenios2
media.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000037c8 memsz 0x000037c8 flags r-x
    LOAD off    0x000047e8 vaddr 0x000037e8 paddr 0x00004ee4 align 2**12
         filesz 0x000016fc memsz 0x000016fc flags rw-
    LOAD off    0x000065e0 vaddr 0x000065e0 paddr 0x000065e0 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000352c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000108  000036e0  000036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016fc  000037e8  00004ee4  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  000065e0  000065e0  000065e0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00005f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ae2  00000000  00000000  000064c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b75f  00000000  00000000  00006faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002896  00000000  00000000  00012709  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006fda  00000000  00000000  00014f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ba8  00000000  00000000  0001bf7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c3f  00000000  00000000  0001cb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000128b  00000000  00000000  0001d763  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001ea10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00020a7f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00020a82  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00020a83  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00020a84  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00020a88  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00020a90  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00020a99  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00020aa2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00020aab  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  00020ab6  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ec9  00000000  00000000  00020ae2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006cdb1  00000000  00000000  000259ab  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000036e0 l    d  .rodata	00000000 .rodata
000037e8 l    d  .rwdata	00000000 .rwdata
000065e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media.c
00003730 l     O .rodata	00000010 C.3.2271
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000868 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000037e8 l     O .rwdata	00001060 JTAG_UART
00004848 l     O .rwdata	0000002c Char_LCD_16x2
00004874 l     O .rwdata	00000048 VGA_Char_Buffer
000048bc l     O .rwdata	00000054 VGA_Pixel_Buffer
00000c9c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000edc l     F .text	00000228 altera_avalon_jtag_uart_irq
00001104 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001780 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002304 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002380 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002460 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002918 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002a54 l     F .text	000000dc alt_file_locked
00002cb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00004ab8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000034c8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000367c l     F .text	00000040 alt_sim_halt
000008d4 g     F .text	0000006c alt_main
000065fc g     O .bss	00000100 alt_irq
00004ee4 g       *ABS*	00000000 __flash_rwdata_start
000018fc g     F .text	00000034 alt_up_character_lcd_send_cmd
00001f44 g     F .text	00000114 alt_up_char_buffer_string
00000304 g     F .text	0000006c LCD_cursor
00001e74 g     F .text	000000d0 alt_up_char_buffer_draw
00000000  w      *UND*	00000000 __errno
00001880 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000065f8 g     O .bss	00000004 errno
000065e4 g     O .bss	00000004 alt_argv
0000ceb8 g       *ABS*	00000000 _gp
00004938 g     O .rwdata	00000180 alt_fd_list
00002588 g     F .text	00000094 alt_find_dev
00000748 g     F .text	000000a0 memcpy
00001a94 g     F .text	0000004c alt_up_character_lcd_write_fd
00002058 g     F .text	0000005c alt_up_char_buffer_clear
000029dc g     F .text	00000078 alt_io_redirect
000036e0 g       *ABS*	00000000 __DTOR_END__
0000131c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000370 g     F .text	0000006c LCD_text
00003114 g     F .text	00000090 alt_icache_flush
00004ec8 g     O .rwdata	00000004 alt_max_fd
00004ee0 g     O .rwdata	00000004 _global_impure_ptr
0000688c g       *ABS*	00000000 __bss_end
00002820 g     F .text	000000f8 alt_iic_isr_register
00002e10 g     F .text	0000010c alt_tick
000027d8 g     F .text	00000048 alt_ic_irq_enabled
00000680 g     F .text	000000c8 check_KEYs
00002d78 g     F .text	00000098 alt_alarm_stop
000065ec g     O .bss	00000004 alt_irq_active
00000410 g     F .text	00000098 VGA_text
000000ec g     F .exceptions	000000c8 alt_irq_handler
00004910 g     O .rwdata	00000028 alt_dev_null
00001d7c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00002364 g     F .text	0000001c alt_dcache_flush_all
00004ee4 g       *ABS*	00000000 __ram_rwdata_end
00004ec0 g     O .rwdata	00000008 alt_dev_list
000037e8 g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000688c g       *ABS*	00000000 end
00001db0 g     F .text	00000084 alt_up_char_buffer_init
00000e1c g     F .text	000000c0 altera_avalon_jtag_uart_init
000036dc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000055c g     F .text	00000124 HEX_PS2
000017f0 g     F .text	00000090 alt_avalon_timer_sc_init
00001540 g     F .text	00000240 altera_avalon_jtag_uart_write
000019a4 g     F .text	00000078 alt_up_character_lcd_write
000034cc g     F .text	000001b0 __call_exitprocs
000001b4 g     F .text	0000003c _start
000065f0 g     O .bss	00000004 _alt_tick_rate
000065f4 g     O .bss	00000004 _alt_nticks
00000974 g     F .text	00000328 alt_sys_init
00001c08 g     F .text	000000b0 alt_up_character_lcd_shift_display
00003394 g     F .text	00000134 __register_exitproc
000004a8 g     F .text	000000b4 VGA_box
00001cb8 g     F .text	00000090 alt_up_character_lcd_erase_pos
000011b4 g     F .text	00000074 altera_avalon_jtag_uart_close
000037e8 g       *ABS*	00000000 __ram_rwdata_start
000036e0 g       *ABS*	00000000 __ram_rodata_start
00000cd4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000305c g     F .text	000000b8 alt_get_fd
000031f0 g     F .text	00000074 memcmp
00000d84 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0000688c g       *ABS*	00000000 __alt_stack_base
00000dcc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002f3c g     F .text	00000120 alt_find_file
000023ac g     F .text	000000b4 alt_dev_llist_insert
000065e0 g       *ABS*	00000000 __bss_start
000001f0 g     F .text	00000114 main
000065e8 g     O .bss	00000004 alt_envp
00001e34 g     F .text	00000040 alt_up_char_buffer_open_dev
00000d2c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000003dc g     F .text	00000034 LCD_cursor_off
00001b58 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
000066fc g     O .bss	00000190 _atexit0
00004ecc g     O .rwdata	00000004 alt_errno
00001964 g     F .text	00000040 alt_up_character_lcd_open_dev
000036e0 g       *ABS*	00000000 __CTOR_END__
00001930 g     F .text	00000034 alt_up_character_lcd_init
00003264 g     F .text	000000bc strcmp
000036e0 g       *ABS*	00000000 __flash_rodata_start
000036e0 g       *ABS*	00000000 __DTOR_LIST__
00000940 g     F .text	00000034 alt_irq_init
00002d18 g     F .text	00000060 alt_release_fd
00001d48 g     F .text	00000034 alt_up_character_lcd_cursor_off
000031a4 g     F .text	00000014 atexit
00004edc g     O .rwdata	00000004 _impure_ptr
000065e0 g     O .bss	00000004 alt_argc
00002524 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00004eb8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000264c g     F .text	00000050 alt_ic_isr_register
00004ee4 g       *ABS*	00000000 _edata
0000688c g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00001228 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00002738 g     F .text	000000a0 alt_ic_irq_disable
00002f1c g     F .text	00000020 altera_nios2_qsys_irq_init
000031b8 g     F .text	00000038 exit
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001a1c g     F .text	00000078 alt_up_character_lcd_string
000036bc g     F .text	00000020 _exit
000020b4 g     F .text	00000154 alt_alarm_start
00003320 g     F .text	00000074 strlen
00002b30 g     F .text	00000188 open
0000261c g     F .text	00000030 alt_icache_flush_all
00001ae0 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00004ed0 g     O .rwdata	00000004 alt_priority_mask
0000269c g     F .text	0000009c alt_ic_irq_enable
00004ed4 g     O .rwdata	00000008 alt_alarm_list
000024c0 g     F .text	00000064 _do_ctors
00002208 g     F .text	000000fc close
000007e8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18d97f04 	addi	r3,r3,26108
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18d97f04 	addi	r3,r3,26108
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6b3ae14 	ori	gp,gp,52920
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10997814 	ori	r2,r2,26080

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18da2314 	ori	r3,r3,26764

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	00007e80 	call	7e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	00008d40 	call	8d4 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
 * 	4. Shows a text message on the LCD display
 * 	5. Displays the last three bytes of data received from the PS/2 port
 * 	   on the HEX displays on the DE2 board
********************************************************************************/
int main()
{
     1f0:	deffe904 	addi	sp,sp,-92
     1f4:	dfc01615 	stw	ra,88(sp)
     1f8:	df001515 	stw	fp,84(sp)
     1fc:	df001504 	addi	fp,sp,84
	/* create a message to be displayed on the VGA and LCD displays */
	char text_top_row[40] = "Intel FPGA DE2-115\0";
     200:	00c00034 	movhi	r3,0
     204:	18cdb804 	addi	r3,r3,14048
     208:	18800017 	ldw	r2,0(r3)
     20c:	e0bfec15 	stw	r2,-80(fp)
     210:	18800117 	ldw	r2,4(r3)
     214:	e0bfed15 	stw	r2,-76(fp)
     218:	18800217 	ldw	r2,8(r3)
     21c:	e0bfee15 	stw	r2,-72(fp)
     220:	18800317 	ldw	r2,12(r3)
     224:	e0bfef15 	stw	r2,-68(fp)
     228:	18800417 	ldw	r2,16(r3)
     22c:	e0bff015 	stw	r2,-64(fp)
     230:	e03ff115 	stw	zero,-60(fp)
     234:	e03ff215 	stw	zero,-56(fp)
     238:	e03ff315 	stw	zero,-52(fp)
     23c:	e03ff415 	stw	zero,-48(fp)
     240:	e03ff515 	stw	zero,-44(fp)
	char text_bottom_row[40] = "SoC Group.\0";
     244:	00c00034 	movhi	r3,0
     248:	18cdc204 	addi	r3,r3,14088
     24c:	18800017 	ldw	r2,0(r3)
     250:	e0bff615 	stw	r2,-40(fp)
     254:	18800117 	ldw	r2,4(r3)
     258:	e0bff715 	stw	r2,-36(fp)
     25c:	18800217 	ldw	r2,8(r3)
     260:	e0bff815 	stw	r2,-32(fp)
     264:	e03ff915 	stw	zero,-28(fp)
     268:	e03ffa15 	stw	zero,-24(fp)
     26c:	e03ffb15 	stw	zero,-20(fp)
     270:	e03ffc15 	stw	zero,-16(fp)
     274:	e03ffd15 	stw	zero,-12(fp)
     278:	e03ffe15 	stw	zero,-8(fp)
     27c:	e03fff15 	stw	zero,-4(fp)

	/* output text message to the LCD */
	LCD_cursor (0,0);										// set LCD cursor location to top row
     280:	0009883a 	mov	r4,zero
     284:	000b883a 	mov	r5,zero
     288:	00003040 	call	304 <LCD_cursor>
	LCD_text (text_top_row);
     28c:	e13fec04 	addi	r4,fp,-80
     290:	00003700 	call	370 <LCD_text>
	LCD_cursor (0,1);										// set LCD cursor location to bottom row
     294:	0009883a 	mov	r4,zero
     298:	01400044 	movi	r5,1
     29c:	00003040 	call	304 <LCD_cursor>
	LCD_text (text_bottom_row);
     2a0:	e13ff604 	addi	r4,fp,-40
     2a4:	00003700 	call	370 <LCD_text>
	LCD_cursor_off ();									// turn off the LCD cursor
     2a8:	00003dc0 	call	3dc <LCD_cursor_off>

	/* output text message in the middle of the VGA monitor */
	VGA_text (35, 29, text_top_row);
     2ac:	010008c4 	movi	r4,35
     2b0:	01400744 	movi	r5,29
     2b4:	e1bfec04 	addi	r6,fp,-80
     2b8:	00004100 	call	410 <VGA_text>
	VGA_text (35, 30, text_bottom_row);
     2bc:	e1bff604 	addi	r6,fp,-40
     2c0:	010008c4 	movi	r4,35
     2c4:	01400784 	movi	r5,30
     2c8:	00004100 	call	410 <VGA_text>
	VGA_box (0, 0, 319, 239, 0);						// clear the screen
     2cc:	d8000015 	stw	zero,0(sp)
     2d0:	0009883a 	mov	r4,zero
     2d4:	000b883a 	mov	r5,zero
     2d8:	01804fc4 	movi	r6,319
     2dc:	01c03bc4 	movi	r7,239
     2e0:	00004a80 	call	4a8 <VGA_box>
	VGA_box (32*4, 24*4, 64*4, 36*4, 0x187F);
     2e4:	00861fc4 	movi	r2,6271
     2e8:	d8800015 	stw	r2,0(sp)
     2ec:	01002004 	movi	r4,128
     2f0:	01401804 	movi	r5,96
     2f4:	01804004 	movi	r6,256
     2f8:	01c02404 	movi	r7,144
     2fc:	00004a80 	call	4a8 <VGA_box>

	while(1)
	{
	}
     300:	003fff06 	br	300 <main+0x110>

00000304 <LCD_cursor>:

/****************************************************************************************
 * Subroutine to move the LCD cursor
****************************************************************************************/
void LCD_cursor(int x, int y)
{
     304:	defffb04 	addi	sp,sp,-20
     308:	df000415 	stw	fp,16(sp)
     30c:	df000404 	addi	fp,sp,16
     310:	e13ffe15 	stw	r4,-8(fp)
     314:	e17fff15 	stw	r5,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     318:	00840034 	movhi	r2,4096
     31c:	108c1404 	addi	r2,r2,12368
     320:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x;
     324:	e0bffe17 	ldw	r2,-8(fp)
     328:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
     32c:	e0bfff17 	ldw	r2,-4(fp)
     330:	1005003a 	cmpeq	r2,r2,zero
     334:	1000031e 	bne	r2,zero,344 <LCD_cursor+0x40>
     338:	e0bffc03 	ldbu	r2,-16(fp)
     33c:	10801014 	ori	r2,r2,64
     340:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
     344:	00ffe004 	movi	r3,-128
     348:	e0bffc03 	ldbu	r2,-16(fp)
     34c:	10c4b03a 	or	r2,r2,r3
     350:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
     354:	e0fffd17 	ldw	r3,-12(fp)
     358:	e0bffc03 	ldbu	r2,-16(fp)
     35c:	18800005 	stb	r2,0(r3)
}
     360:	e037883a 	mov	sp,fp
     364:	df000017 	ldw	fp,0(sp)
     368:	dec00104 	addi	sp,sp,4
     36c:	f800283a 	ret

00000370 <LCD_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
     370:	defffd04 	addi	sp,sp,-12
     374:	df000215 	stw	fp,8(sp)
     378:	df000204 	addi	fp,sp,8
     37c:	e13fff15 	stw	r4,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     380:	00840034 	movhi	r2,4096
     384:	108c1404 	addi	r2,r2,12368
     388:	e0bffe15 	stw	r2,-8(fp)

	while ( *(text_ptr) )
     38c:	00000806 	br	3b0 <LCD_text+0x40>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
     390:	e0bffe17 	ldw	r2,-8(fp)
     394:	10c00044 	addi	r3,r2,1
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	10800003 	ldbu	r2,0(r2)
     3a0:	18800005 	stb	r2,0(r3)
		++text_ptr;
     3a4:	e0bfff17 	ldw	r2,-4(fp)
     3a8:	10800044 	addi	r2,r2,1
     3ac:	e0bfff15 	stw	r2,-4(fp)
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display

	while ( *(text_ptr) )
     3b0:	e0bfff17 	ldw	r2,-4(fp)
     3b4:	10800003 	ldbu	r2,0(r2)
     3b8:	10803fcc 	andi	r2,r2,255
     3bc:	1080201c 	xori	r2,r2,128
     3c0:	10bfe004 	addi	r2,r2,-128
     3c4:	1004c03a 	cmpne	r2,r2,zero
     3c8:	103ff11e 	bne	r2,zero,390 <LCD_text+0x20>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
		++text_ptr;
	}
}
     3cc:	e037883a 	mov	sp,fp
     3d0:	df000017 	ldw	fp,0(sp)
     3d4:	dec00104 	addi	sp,sp,4
     3d8:	f800283a 	ret

000003dc <LCD_cursor_off>:

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
     3dc:	defffe04 	addi	sp,sp,-8
     3e0:	df000115 	stw	fp,4(sp)
     3e4:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) 0x10003050;	// 16x2 character display
     3e8:	00840034 	movhi	r2,4096
     3ec:	108c1404 	addi	r2,r2,12368
     3f0:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x0C;											// turn off the LCD cursor
     3f4:	e0ffff17 	ldw	r3,-4(fp)
     3f8:	00800304 	movi	r2,12
     3fc:	18800005 	stb	r2,0(r3)
}
     400:	e037883a 	mov	sp,fp
     404:	df000017 	ldw	fp,0(sp)
     408:	dec00104 	addi	sp,sp,4
     40c:	f800283a 	ret

00000410 <VGA_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
     410:	defffa04 	addi	sp,sp,-24
     414:	df000515 	stw	fp,20(sp)
     418:	df000504 	addi	fp,sp,20
     41c:	e13ffd15 	stw	r4,-12(fp)
     420:	e17ffe15 	stw	r5,-8(fp)
     424:	e1bfff15 	stw	r6,-4(fp)
	int offset;
  	volatile char * character_buffer = (char *) VGA_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;	// VGA character buffer
     428:	00824034 	movhi	r2,2304
     42c:	e0bffb15 	stw	r2,-20(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
     430:	e0bffe17 	ldw	r2,-8(fp)
     434:	100691fa 	slli	r3,r2,7
     438:	e0bffd17 	ldw	r2,-12(fp)
     43c:	1885883a 	add	r2,r3,r2
     440:	e0bffc15 	stw	r2,-16(fp)
	while ( *(text_ptr) )
     444:	00000d06 	br	47c <VGA_text+0x6c>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
     448:	e0bffc17 	ldw	r2,-16(fp)
     44c:	1007883a 	mov	r3,r2
     450:	e0bffb17 	ldw	r2,-20(fp)
     454:	1887883a 	add	r3,r3,r2
     458:	e0bfff17 	ldw	r2,-4(fp)
     45c:	10800003 	ldbu	r2,0(r2)
     460:	18800005 	stb	r2,0(r3)
		++text_ptr;
     464:	e0bfff17 	ldw	r2,-4(fp)
     468:	10800044 	addi	r2,r2,1
     46c:	e0bfff15 	stw	r2,-4(fp)
		++offset;
     470:	e0bffc17 	ldw	r2,-16(fp)
     474:	10800044 	addi	r2,r2,1
     478:	e0bffc15 	stw	r2,-16(fp)
	int offset;
  	volatile char * character_buffer = (char *) VGA_CHAR_BUFFER_AVALON_CHAR_BUFFER_SLAVE_BASE;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
     47c:	e0bfff17 	ldw	r2,-4(fp)
     480:	10800003 	ldbu	r2,0(r2)
     484:	10803fcc 	andi	r2,r2,255
     488:	1080201c 	xori	r2,r2,128
     48c:	10bfe004 	addi	r2,r2,-128
     490:	1004c03a 	cmpne	r2,r2,zero
     494:	103fec1e 	bne	r2,zero,448 <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
     498:	e037883a 	mov	sp,fp
     49c:	df000017 	ldw	fp,0(sp)
     4a0:	dec00104 	addi	sp,sp,4
     4a4:	f800283a 	ret

000004a8 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     4a8:	defff604 	addi	sp,sp,-40
     4ac:	df000915 	stw	fp,36(sp)
     4b0:	df000904 	addi	fp,sp,36
     4b4:	e13ffb15 	stw	r4,-20(fp)
     4b8:	e17ffc15 	stw	r5,-16(fp)
     4bc:	e1bffd15 	stw	r6,-12(fp)
     4c0:	e1fffe15 	stw	r7,-8(fp)
     4c4:	e0800117 	ldw	r2,4(fp)
     4c8:	e0bfff0d 	sth	r2,-4(fp)
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) SRAM_BASE;	// VGA pixel buffer
     4cc:	00820034 	movhi	r2,2048
     4d0:	e0bff715 	stw	r2,-36(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     4d4:	e0bffc17 	ldw	r2,-16(fp)
     4d8:	e0bff915 	stw	r2,-28(fp)
     4dc:	00001806 	br	540 <VGA_box+0x98>
	{
		col = x1;
     4e0:	e0bffb17 	ldw	r2,-20(fp)
     4e4:	e0bff815 	stw	r2,-32(fp)
		while (col <= x2)
     4e8:	00000f06 	br	528 <VGA_box+0x80>
		{
			offset = (row << 9) + col;
     4ec:	e0bff917 	ldw	r2,-28(fp)
     4f0:	1006927a 	slli	r3,r2,9
     4f4:	e0bff817 	ldw	r2,-32(fp)
     4f8:	1885883a 	add	r2,r3,r2
     4fc:	e0bffa15 	stw	r2,-24(fp)
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
     500:	e0bffa17 	ldw	r2,-24(fp)
     504:	1085883a 	add	r2,r2,r2
     508:	1007883a 	mov	r3,r2
     50c:	e0bff717 	ldw	r2,-36(fp)
     510:	1887883a 	add	r3,r3,r2
     514:	e0bfff0b 	ldhu	r2,-4(fp)
     518:	1880000d 	sth	r2,0(r3)
			++col;
     51c:	e0bff817 	ldw	r2,-32(fp)
     520:	10800044 	addi	r2,r2,1
     524:	e0bff815 	stw	r2,-32(fp)

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
	{
		col = x1;
		while (col <= x2)
     528:	e0fff817 	ldw	r3,-32(fp)
     52c:	e0bffd17 	ldw	r2,-12(fp)
     530:	10ffee0e 	bge	r2,r3,4ec <VGA_box+0x44>
{
	int offset, row, col;
  	volatile short * pixel_buffer = (short *) SRAM_BASE;	// VGA pixel buffer

	/* assume that the box coordinates are valid */
	for (row = y1; row <= y2; row++)
     534:	e0bff917 	ldw	r2,-28(fp)
     538:	10800044 	addi	r2,r2,1
     53c:	e0bff915 	stw	r2,-28(fp)
     540:	e0fff917 	ldw	r3,-28(fp)
     544:	e0bffe17 	ldw	r2,-8(fp)
     548:	10ffe50e 	bge	r2,r3,4e0 <VGA_box+0x38>
			offset = (row << 9) + col;
			*(pixel_buffer + offset) = pixel_color;	// compute halfword address, set pixel
			++col;
		}
	}
}
     54c:	e037883a 	mov	sp,fp
     550:	df000017 	ldw	fp,0(sp)
     554:	dec00104 	addi	sp,sp,4
     558:	f800283a 	ret

0000055c <HEX_PS2>:

/****************************************************************************************
 * Subroutine to show a string of HEX data on the HEX displays
****************************************************************************************/
void HEX_PS2(char b1, char b2, char b3)
{
     55c:	deffef04 	addi	sp,sp,-68
     560:	dfc01015 	stw	ra,64(sp)
     564:	df000f15 	stw	fp,60(sp)
     568:	df000f04 	addi	fp,sp,60
     56c:	e13ffd05 	stb	r4,-12(fp)
     570:	e17ffe05 	stb	r5,-8(fp)
     574:	e1bfff05 	stb	r6,-4(fp)
	volatile int * HEX3_HEX0_ptr = (int *) 0x10000020;
     578:	00840034 	movhi	r2,4096
     57c:	10800804 	addi	r2,r2,32
     580:	e0bff615 	stw	r2,-40(fp)
	volatile int * HEX7_HEX4_ptr = (int *) 0x10000030;
     584:	00840034 	movhi	r2,4096
     588:	10800c04 	addi	r2,r2,48
     58c:	e0bff515 	stw	r2,-44(fp)

	/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
	 * a single 7-seg display in the DE2 Media Computer, for the hex digits 0 - F */
	unsigned char	seven_seg_decode_table[] = {	0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
		  										0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71 };
     590:	00800034 	movhi	r2,0
     594:	108dcc04 	addi	r2,r2,14128
     598:	e13ff704 	addi	r4,fp,-36
     59c:	100b883a 	mov	r5,r2
     5a0:	01800404 	movi	r6,16
     5a4:	00007480 	call	748 <memcpy>
	unsigned char	hex_segs[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
     5a8:	e03ffb05 	stb	zero,-20(fp)
     5ac:	e03ffb45 	stb	zero,-19(fp)
     5b0:	e03ffb85 	stb	zero,-18(fp)
     5b4:	e03ffbc5 	stb	zero,-17(fp)
     5b8:	e03ffc05 	stb	zero,-16(fp)
     5bc:	e03ffc45 	stb	zero,-15(fp)
     5c0:	e03ffc85 	stb	zero,-14(fp)
     5c4:	e03ffcc5 	stb	zero,-13(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
     5c8:	e0bffd07 	ldb	r2,-12(fp)
     5cc:	1006943a 	slli	r3,r2,16
     5d0:	e0bffe07 	ldb	r2,-8(fp)
     5d4:	1004923a 	slli	r2,r2,8
     5d8:	1886b03a 	or	r3,r3,r2
     5dc:	e0bfff07 	ldb	r2,-4(fp)
     5e0:	1884b03a 	or	r2,r3,r2
     5e4:	e0bff415 	stw	r2,-48(fp)
	for ( i = 0; i < 6; ++i )
     5e8:	e03ff115 	stw	zero,-60(fp)
     5ec:	00001306 	br	63c <HEX_PS2+0xe0>
	{
		nibble = shift_buffer & 0x0000000F;		// character is in rightmost nibble
     5f0:	e0bff417 	ldw	r2,-48(fp)
     5f4:	108003cc 	andi	r2,r2,15
     5f8:	e0bff315 	stw	r2,-52(fp)
		code = seven_seg_decode_table[nibble];
     5fc:	e0fff317 	ldw	r3,-52(fp)
     600:	e0bff704 	addi	r2,fp,-36
     604:	10c5883a 	add	r2,r2,r3
     608:	10800003 	ldbu	r2,0(r2)
     60c:	e0bff205 	stb	r2,-56(fp)
		hex_segs[i] = code;
     610:	e0fff117 	ldw	r3,-60(fp)
     614:	e0bffb04 	addi	r2,fp,-20
     618:	10c7883a 	add	r3,r2,r3
     61c:	e0bff203 	ldbu	r2,-56(fp)
     620:	18800005 	stb	r2,0(r3)
		shift_buffer = shift_buffer >> 4;
     624:	e0bff417 	ldw	r2,-48(fp)
     628:	1004d13a 	srli	r2,r2,4
     62c:	e0bff415 	stw	r2,-48(fp)
	unsigned int shift_buffer, nibble;
	unsigned char code;
	int i;

	shift_buffer = (b1 << 16) | (b2 << 8) | b3;
	for ( i = 0; i < 6; ++i )
     630:	e0bff117 	ldw	r2,-60(fp)
     634:	10800044 	addi	r2,r2,1
     638:	e0bff115 	stw	r2,-60(fp)
     63c:	e0bff117 	ldw	r2,-60(fp)
     640:	10800190 	cmplti	r2,r2,6
     644:	103fea1e 	bne	r2,zero,5f0 <HEX_PS2+0x94>
		code = seven_seg_decode_table[nibble];
		hex_segs[i] = code;
		shift_buffer = shift_buffer >> 4;
	}
	/* drive the hex displays */
	*(HEX3_HEX0_ptr) = *(int *) (hex_segs);
     648:	e0bffb04 	addi	r2,fp,-20
     64c:	10c00017 	ldw	r3,0(r2)
     650:	e0bff617 	ldw	r2,-40(fp)
     654:	10c00015 	stw	r3,0(r2)
	*(HEX7_HEX4_ptr) = *(int *) (hex_segs+4);
     658:	e0bffb04 	addi	r2,fp,-20
     65c:	10800104 	addi	r2,r2,4
     660:	10c00017 	ldw	r3,0(r2)
     664:	e0bff517 	ldw	r2,-44(fp)
     668:	10c00015 	stw	r3,0(r2)
}
     66c:	e037883a 	mov	sp,fp
     670:	dfc00117 	ldw	ra,4(sp)
     674:	df000017 	ldw	fp,0(sp)
     678:	dec00204 	addi	sp,sp,8
     67c:	f800283a 	ret

00000680 <check_KEYs>:

/****************************************************************************************
 * Subroutine to read KEYs
****************************************************************************************/
void check_KEYs(int * KEY1, int * KEY2, int * counter)
{
     680:	defff904 	addi	sp,sp,-28
     684:	df000615 	stw	fp,24(sp)
     688:	df000604 	addi	fp,sp,24
     68c:	e13ffd15 	stw	r4,-12(fp)
     690:	e17ffe15 	stw	r5,-8(fp)
     694:	e1bfff15 	stw	r6,-4(fp)
	volatile int * KEY_ptr = (int *) 0x10000050;		// pushbutton KEY address
     698:	00840034 	movhi	r2,4096
     69c:	10801404 	addi	r2,r2,80
     6a0:	e0bffc15 	stw	r2,-16(fp)
	volatile int * audio_ptr = (int *) 0x10003040;	// audio port address
     6a4:	00840034 	movhi	r2,4096
     6a8:	108c1004 	addi	r2,r2,12352
     6ac:	e0bffb15 	stw	r2,-20(fp)
	int KEY_value;

	KEY_value = *(KEY_ptr); 				// read the pushbutton KEY values
     6b0:	e0bffc17 	ldw	r2,-16(fp)
     6b4:	10800017 	ldw	r2,0(r2)
     6b8:	e0bffa15 	stw	r2,-24(fp)
	while (*KEY_ptr);							// wait for pushbutton KEY release
     6bc:	e0bffc17 	ldw	r2,-16(fp)
     6c0:	10800017 	ldw	r2,0(r2)
     6c4:	1004c03a 	cmpne	r2,r2,zero
     6c8:	103ffc1e 	bne	r2,zero,6bc <check_KEYs+0x3c>

	if (KEY_value == 0x2)					// check KEY1
     6cc:	e0bffa17 	ldw	r2,-24(fp)
     6d0:	10800098 	cmpnei	r2,r2,2
     6d4:	10000b1e 	bne	r2,zero,704 <check_KEYs+0x84>
	{
		// reset counter to start recording
		*counter = 0;
     6d8:	e0bfff17 	ldw	r2,-4(fp)
     6dc:	10000015 	stw	zero,0(r2)
		// clear audio-in FIFO
		*(audio_ptr) = 0x4;
     6e0:	e0fffb17 	ldw	r3,-20(fp)
     6e4:	00800104 	movi	r2,4
     6e8:	18800015 	stw	r2,0(r3)
		*(audio_ptr) = 0x0;
     6ec:	e0bffb17 	ldw	r2,-20(fp)
     6f0:	10000015 	stw	zero,0(r2)

		*KEY1 = 1;
     6f4:	e0fffd17 	ldw	r3,-12(fp)
     6f8:	00800044 	movi	r2,1
     6fc:	18800015 	stw	r2,0(r3)
     700:	00000d06 	br	738 <check_KEYs+0xb8>
	}
	else if (KEY_value == 0x4)				// check KEY2
     704:	e0bffa17 	ldw	r2,-24(fp)
     708:	10800118 	cmpnei	r2,r2,4
     70c:	10000a1e 	bne	r2,zero,738 <check_KEYs+0xb8>
	{
		// reset counter to start playback
		*counter = 0;
     710:	e0bfff17 	ldw	r2,-4(fp)
     714:	10000015 	stw	zero,0(r2)
		// clear audio-out FIFO
		*(audio_ptr) = 0x8;
     718:	e0fffb17 	ldw	r3,-20(fp)
     71c:	00800204 	movi	r2,8
     720:	18800015 	stw	r2,0(r3)
		*(audio_ptr) = 0x0;
     724:	e0bffb17 	ldw	r2,-20(fp)
     728:	10000015 	stw	zero,0(r2)

		*KEY2 = 1;
     72c:	e0fffe17 	ldw	r3,-8(fp)
     730:	00800044 	movi	r2,1
     734:	18800015 	stw	r2,0(r3)
	}
}
     738:	e037883a 	mov	sp,fp
     73c:	df000017 	ldw	fp,0(sp)
     740:	dec00104 	addi	sp,sp,4
     744:	f800283a 	ret

00000748 <memcpy>:
     748:	01c003c4 	movi	r7,15
     74c:	2007883a 	mov	r3,r4
     750:	3980032e 	bgeu	r7,r6,760 <memcpy+0x18>
     754:	2904b03a 	or	r2,r5,r4
     758:	108000cc 	andi	r2,r2,3
     75c:	10000926 	beq	r2,zero,784 <memcpy+0x3c>
     760:	30000626 	beq	r6,zero,77c <memcpy+0x34>
     764:	30cd883a 	add	r6,r6,r3
     768:	28800003 	ldbu	r2,0(r5)
     76c:	29400044 	addi	r5,r5,1
     770:	18800005 	stb	r2,0(r3)
     774:	18c00044 	addi	r3,r3,1
     778:	30fffb1e 	bne	r6,r3,768 <memcpy+0x20>
     77c:	2005883a 	mov	r2,r4
     780:	f800283a 	ret
     784:	3811883a 	mov	r8,r7
     788:	200f883a 	mov	r7,r4
     78c:	28c00017 	ldw	r3,0(r5)
     790:	31bffc04 	addi	r6,r6,-16
     794:	38c00015 	stw	r3,0(r7)
     798:	28800117 	ldw	r2,4(r5)
     79c:	38800115 	stw	r2,4(r7)
     7a0:	28c00217 	ldw	r3,8(r5)
     7a4:	38c00215 	stw	r3,8(r7)
     7a8:	28800317 	ldw	r2,12(r5)
     7ac:	29400404 	addi	r5,r5,16
     7b0:	38800315 	stw	r2,12(r7)
     7b4:	39c00404 	addi	r7,r7,16
     7b8:	41bff436 	bltu	r8,r6,78c <memcpy+0x44>
     7bc:	008000c4 	movi	r2,3
     7c0:	1180072e 	bgeu	r2,r6,7e0 <memcpy+0x98>
     7c4:	1007883a 	mov	r3,r2
     7c8:	28800017 	ldw	r2,0(r5)
     7cc:	31bfff04 	addi	r6,r6,-4
     7d0:	29400104 	addi	r5,r5,4
     7d4:	38800015 	stw	r2,0(r7)
     7d8:	39c00104 	addi	r7,r7,4
     7dc:	19bffa36 	bltu	r3,r6,7c8 <memcpy+0x80>
     7e0:	3807883a 	mov	r3,r7
     7e4:	003fde06 	br	760 <memcpy+0x18>

000007e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     7e8:	defffe04 	addi	sp,sp,-8
     7ec:	dfc00115 	stw	ra,4(sp)
     7f0:	df000015 	stw	fp,0(sp)
     7f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     7f8:	01000034 	movhi	r4,0
     7fc:	2113b904 	addi	r4,r4,20196
     800:	01400034 	movhi	r5,0
     804:	294dfa04 	addi	r5,r5,14312
     808:	01800034 	movhi	r6,0
     80c:	3193b904 	addi	r6,r6,20196
     810:	00008680 	call	868 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     814:	01000034 	movhi	r4,0
     818:	21000804 	addi	r4,r4,32
     81c:	01400034 	movhi	r5,0
     820:	29400804 	addi	r5,r5,32
     824:	01800034 	movhi	r6,0
     828:	31806d04 	addi	r6,r6,436
     82c:	00008680 	call	868 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     830:	01000034 	movhi	r4,0
     834:	210db804 	addi	r4,r4,14048
     838:	01400034 	movhi	r5,0
     83c:	294db804 	addi	r5,r5,14048
     840:	01800034 	movhi	r6,0
     844:	318dfa04 	addi	r6,r6,14312
     848:	00008680 	call	868 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     84c:	00023640 	call	2364 <alt_dcache_flush_all>
  alt_icache_flush_all();
     850:	000261c0 	call	261c <alt_icache_flush_all>
}
     854:	e037883a 	mov	sp,fp
     858:	dfc00117 	ldw	ra,4(sp)
     85c:	df000017 	ldw	fp,0(sp)
     860:	dec00204 	addi	sp,sp,8
     864:	f800283a 	ret

00000868 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     868:	defffc04 	addi	sp,sp,-16
     86c:	df000315 	stw	fp,12(sp)
     870:	df000304 	addi	fp,sp,12
     874:	e13ffd15 	stw	r4,-12(fp)
     878:	e17ffe15 	stw	r5,-8(fp)
     87c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     880:	e0fffe17 	ldw	r3,-8(fp)
     884:	e0bffd17 	ldw	r2,-12(fp)
     888:	18800e26 	beq	r3,r2,8c4 <alt_load_section+0x5c>
  {
    while( to != end )
     88c:	00000a06 	br	8b8 <alt_load_section+0x50>
    {
      *to++ = *from++;
     890:	e0bffd17 	ldw	r2,-12(fp)
     894:	10c00017 	ldw	r3,0(r2)
     898:	e0bffe17 	ldw	r2,-8(fp)
     89c:	10c00015 	stw	r3,0(r2)
     8a0:	e0bffe17 	ldw	r2,-8(fp)
     8a4:	10800104 	addi	r2,r2,4
     8a8:	e0bffe15 	stw	r2,-8(fp)
     8ac:	e0bffd17 	ldw	r2,-12(fp)
     8b0:	10800104 	addi	r2,r2,4
     8b4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8b8:	e0fffe17 	ldw	r3,-8(fp)
     8bc:	e0bfff17 	ldw	r2,-4(fp)
     8c0:	18bff31e 	bne	r3,r2,890 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     8c4:	e037883a 	mov	sp,fp
     8c8:	df000017 	ldw	fp,0(sp)
     8cc:	dec00104 	addi	sp,sp,4
     8d0:	f800283a 	ret

000008d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     8d4:	defffd04 	addi	sp,sp,-12
     8d8:	dfc00215 	stw	ra,8(sp)
     8dc:	df000115 	stw	fp,4(sp)
     8e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     8e4:	0009883a 	mov	r4,zero
     8e8:	00009400 	call	940 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     8ec:	00009740 	call	974 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     8f0:	01000034 	movhi	r4,0
     8f4:	210dd004 	addi	r4,r4,14144
     8f8:	01400034 	movhi	r5,0
     8fc:	294dd004 	addi	r5,r5,14144
     900:	01800034 	movhi	r6,0
     904:	318dd004 	addi	r6,r6,14144
     908:	00029dc0 	call	29dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     90c:	00024c00 	call	24c0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     910:	01000034 	movhi	r4,0
     914:	21094904 	addi	r4,r4,9508
     918:	00031a40 	call	31a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     91c:	d125ca17 	ldw	r4,-26840(gp)
     920:	d165cb17 	ldw	r5,-26836(gp)
     924:	d1a5cc17 	ldw	r6,-26832(gp)
     928:	00001f00 	call	1f0 <main>
     92c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     930:	01000044 	movi	r4,1
     934:	00022080 	call	2208 <close>
  exit (result);
     938:	e13fff17 	ldw	r4,-4(fp)
     93c:	00031b80 	call	31b8 <exit>

00000940 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     940:	defffd04 	addi	sp,sp,-12
     944:	dfc00215 	stw	ra,8(sp)
     948:	df000115 	stw	fp,4(sp)
     94c:	df000104 	addi	fp,sp,4
     950:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     954:	0002f1c0 	call	2f1c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     958:	00800044 	movi	r2,1
     95c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     960:	e037883a 	mov	sp,fp
     964:	dfc00117 	ldw	ra,4(sp)
     968:	df000017 	ldw	fp,0(sp)
     96c:	dec00204 	addi	sp,sp,8
     970:	f800283a 	ret

00000974 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     974:	defffd04 	addi	sp,sp,-12
     978:	dfc00215 	stw	ra,8(sp)
     97c:	df000115 	stw	fp,4(sp)
     980:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     984:	01040034 	movhi	r4,4096
     988:	21080004 	addi	r4,r4,8192
     98c:	000b883a 	mov	r5,zero
     990:	000d883a 	mov	r6,zero
     994:	01c00204 	movi	r7,8
     998:	00017f00 	call	17f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     99c:	01000034 	movhi	r4,0
     9a0:	210e0404 	addi	r4,r4,14352
     9a4:	000b883a 	mov	r5,zero
     9a8:	01800204 	movi	r6,8
     9ac:	0000e1c0 	call	e1c <altera_avalon_jtag_uart_init>
     9b0:	01000034 	movhi	r4,0
     9b4:	210dfa04 	addi	r4,r4,14312
     9b8:	0000c9c0 	call	c9c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     9bc:	01000034 	movhi	r4,0
     9c0:	21121204 	addi	r4,r4,18504
     9c4:	00019300 	call	1930 <alt_up_character_lcd_init>
     9c8:	01000034 	movhi	r4,0
     9cc:	21121204 	addi	r4,r4,18504
     9d0:	0000c9c0 	call	c9c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     9d4:	00800034 	movhi	r2,0
     9d8:	10921d04 	addi	r2,r2,18548
     9dc:	10800a17 	ldw	r2,40(r2)
     9e0:	10800104 	addi	r2,r2,4
     9e4:	10800017 	ldw	r2,0(r2)
     9e8:	10ffffcc 	andi	r3,r2,65535
     9ec:	00800034 	movhi	r2,0
     9f0:	10921d04 	addi	r2,r2,18548
     9f4:	10c00c15 	stw	r3,48(r2)
     9f8:	00800034 	movhi	r2,0
     9fc:	10921d04 	addi	r2,r2,18548
     a00:	10800a17 	ldw	r2,40(r2)
     a04:	10800104 	addi	r2,r2,4
     a08:	10800017 	ldw	r2,0(r2)
     a0c:	1005d43a 	srai	r2,r2,16
     a10:	10ffffcc 	andi	r3,r2,65535
     a14:	00800034 	movhi	r2,0
     a18:	10921d04 	addi	r2,r2,18548
     a1c:	10c00d15 	stw	r3,52(r2)
     a20:	00800034 	movhi	r2,0
     a24:	10921d04 	addi	r2,r2,18548
     a28:	10800c17 	ldw	r2,48(r2)
     a2c:	10801068 	cmpgeui	r2,r2,65
     a30:	1000081e 	bne	r2,zero,a54 <alt_sys_init+0xe0>
     a34:	00c00034 	movhi	r3,0
     a38:	18d21d04 	addi	r3,r3,18548
     a3c:	00800fc4 	movi	r2,63
     a40:	18800f15 	stw	r2,60(r3)
     a44:	00c00034 	movhi	r3,0
     a48:	18d21d04 	addi	r3,r3,18548
     a4c:	00800184 	movi	r2,6
     a50:	18801015 	stw	r2,64(r3)
     a54:	00800034 	movhi	r2,0
     a58:	10921d04 	addi	r2,r2,18548
     a5c:	10800d17 	ldw	r2,52(r2)
     a60:	10800868 	cmpgeui	r2,r2,33
     a64:	1000041e 	bne	r2,zero,a78 <alt_sys_init+0x104>
     a68:	00c00034 	movhi	r3,0
     a6c:	18d21d04 	addi	r3,r3,18548
     a70:	008007c4 	movi	r2,31
     a74:	18801115 	stw	r2,68(r3)
     a78:	01000034 	movhi	r4,0
     a7c:	21121d04 	addi	r4,r4,18548
     a80:	0001db00 	call	1db0 <alt_up_char_buffer_init>
     a84:	01000034 	movhi	r4,0
     a88:	21121d04 	addi	r4,r4,18548
     a8c:	0000c9c0 	call	c9c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     a90:	00800034 	movhi	r2,0
     a94:	10922f04 	addi	r2,r2,18620
     a98:	10800a17 	ldw	r2,40(r2)
     a9c:	10800017 	ldw	r2,0(r2)
     aa0:	1007883a 	mov	r3,r2
     aa4:	00800034 	movhi	r2,0
     aa8:	10922f04 	addi	r2,r2,18620
     aac:	10c00b15 	stw	r3,44(r2)
     ab0:	00800034 	movhi	r2,0
     ab4:	10922f04 	addi	r2,r2,18620
     ab8:	10800a17 	ldw	r2,40(r2)
     abc:	10800104 	addi	r2,r2,4
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	1007883a 	mov	r3,r2
     ac8:	00800034 	movhi	r2,0
     acc:	10922f04 	addi	r2,r2,18620
     ad0:	10c00c15 	stw	r3,48(r2)
     ad4:	00800034 	movhi	r2,0
     ad8:	10922f04 	addi	r2,r2,18620
     adc:	10800a17 	ldw	r2,40(r2)
     ae0:	10800204 	addi	r2,r2,8
     ae4:	10800017 	ldw	r2,0(r2)
     ae8:	10ffffcc 	andi	r3,r2,65535
     aec:	00800034 	movhi	r2,0
     af0:	10922f04 	addi	r2,r2,18620
     af4:	10c00f15 	stw	r3,60(r2)
     af8:	00800034 	movhi	r2,0
     afc:	10922f04 	addi	r2,r2,18620
     b00:	10800a17 	ldw	r2,40(r2)
     b04:	10800204 	addi	r2,r2,8
     b08:	10800017 	ldw	r2,0(r2)
     b0c:	1005d43a 	srai	r2,r2,16
     b10:	10ffffcc 	andi	r3,r2,65535
     b14:	00800034 	movhi	r2,0
     b18:	10922f04 	addi	r2,r2,18620
     b1c:	10c01015 	stw	r3,64(r2)
     b20:	00800034 	movhi	r2,0
     b24:	10922f04 	addi	r2,r2,18620
     b28:	10800a17 	ldw	r2,40(r2)
     b2c:	10800304 	addi	r2,r2,12
     b30:	10800017 	ldw	r2,0(r2)
     b34:	1005d07a 	srai	r2,r2,1
     b38:	10c0004c 	andi	r3,r2,1
     b3c:	00800034 	movhi	r2,0
     b40:	10922f04 	addi	r2,r2,18620
     b44:	10c00d15 	stw	r3,52(r2)
     b48:	00800034 	movhi	r2,0
     b4c:	10922f04 	addi	r2,r2,18620
     b50:	10800a17 	ldw	r2,40(r2)
     b54:	10800304 	addi	r2,r2,12
     b58:	10800017 	ldw	r2,0(r2)
     b5c:	1005d13a 	srai	r2,r2,4
     b60:	10c003cc 	andi	r3,r2,15
     b64:	00800034 	movhi	r2,0
     b68:	10922f04 	addi	r2,r2,18620
     b6c:	10c00e15 	stw	r3,56(r2)
     b70:	00800034 	movhi	r2,0
     b74:	10922f04 	addi	r2,r2,18620
     b78:	10800a17 	ldw	r2,40(r2)
     b7c:	10800304 	addi	r2,r2,12
     b80:	10800017 	ldw	r2,0(r2)
     b84:	1005d43a 	srai	r2,r2,16
     b88:	1007883a 	mov	r3,r2
     b8c:	00bfffc4 	movi	r2,-1
     b90:	1884703a 	and	r2,r3,r2
     b94:	e0bfff45 	stb	r2,-3(fp)
     b98:	00800034 	movhi	r2,0
     b9c:	10922f04 	addi	r2,r2,18620
     ba0:	10800a17 	ldw	r2,40(r2)
     ba4:	10800304 	addi	r2,r2,12
     ba8:	10800017 	ldw	r2,0(r2)
     bac:	1005d63a 	srai	r2,r2,24
     bb0:	1007883a 	mov	r3,r2
     bb4:	00bfffc4 	movi	r2,-1
     bb8:	1884703a 	and	r2,r3,r2
     bbc:	e0bfff05 	stb	r2,-4(fp)
     bc0:	00800034 	movhi	r2,0
     bc4:	10922f04 	addi	r2,r2,18620
     bc8:	10800e17 	ldw	r2,56(r2)
     bcc:	10800058 	cmpnei	r2,r2,1
     bd0:	1000041e 	bne	r2,zero,be4 <alt_sys_init+0x270>
     bd4:	00800034 	movhi	r2,0
     bd8:	10922f04 	addi	r2,r2,18620
     bdc:	10001115 	stw	zero,68(r2)
     be0:	00000e06 	br	c1c <alt_sys_init+0x2a8>
     be4:	00800034 	movhi	r2,0
     be8:	10922f04 	addi	r2,r2,18620
     bec:	10800e17 	ldw	r2,56(r2)
     bf0:	10800098 	cmpnei	r2,r2,2
     bf4:	1000051e 	bne	r2,zero,c0c <alt_sys_init+0x298>
     bf8:	00c00034 	movhi	r3,0
     bfc:	18d22f04 	addi	r3,r3,18620
     c00:	00800044 	movi	r2,1
     c04:	18801115 	stw	r2,68(r3)
     c08:	00000406 	br	c1c <alt_sys_init+0x2a8>
     c0c:	00c00034 	movhi	r3,0
     c10:	18d22f04 	addi	r3,r3,18620
     c14:	00800084 	movi	r2,2
     c18:	18801115 	stw	r2,68(r3)
     c1c:	e0ffff43 	ldbu	r3,-3(fp)
     c20:	00800804 	movi	r2,32
     c24:	10c7c83a 	sub	r3,r2,r3
     c28:	00bfffc4 	movi	r2,-1
     c2c:	10c6d83a 	srl	r3,r2,r3
     c30:	00800034 	movhi	r2,0
     c34:	10922f04 	addi	r2,r2,18620
     c38:	10c01215 	stw	r3,72(r2)
     c3c:	e0ffff43 	ldbu	r3,-3(fp)
     c40:	00800034 	movhi	r2,0
     c44:	10922f04 	addi	r2,r2,18620
     c48:	10801117 	ldw	r2,68(r2)
     c4c:	1887883a 	add	r3,r3,r2
     c50:	00800034 	movhi	r2,0
     c54:	10922f04 	addi	r2,r2,18620
     c58:	10c01315 	stw	r3,76(r2)
     c5c:	e0ffff03 	ldbu	r3,-4(fp)
     c60:	00800804 	movi	r2,32
     c64:	10c7c83a 	sub	r3,r2,r3
     c68:	00bfffc4 	movi	r2,-1
     c6c:	10c6d83a 	srl	r3,r2,r3
     c70:	00800034 	movhi	r2,0
     c74:	10922f04 	addi	r2,r2,18620
     c78:	10c01415 	stw	r3,80(r2)
     c7c:	01000034 	movhi	r4,0
     c80:	21122f04 	addi	r4,r4,18620
     c84:	0000c9c0 	call	c9c <alt_dev_reg>
}
     c88:	e037883a 	mov	sp,fp
     c8c:	dfc00117 	ldw	ra,4(sp)
     c90:	df000017 	ldw	fp,0(sp)
     c94:	dec00204 	addi	sp,sp,8
     c98:	f800283a 	ret

00000c9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     c9c:	defffd04 	addi	sp,sp,-12
     ca0:	dfc00215 	stw	ra,8(sp)
     ca4:	df000115 	stw	fp,4(sp)
     ca8:	df000104 	addi	fp,sp,4
     cac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     cb0:	e13fff17 	ldw	r4,-4(fp)
     cb4:	01400034 	movhi	r5,0
     cb8:	2953b004 	addi	r5,r5,20160
     cbc:	00023ac0 	call	23ac <alt_dev_llist_insert>
}
     cc0:	e037883a 	mov	sp,fp
     cc4:	dfc00117 	ldw	ra,4(sp)
     cc8:	df000017 	ldw	fp,0(sp)
     ccc:	dec00204 	addi	sp,sp,8
     cd0:	f800283a 	ret

00000cd4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     cd4:	defffa04 	addi	sp,sp,-24
     cd8:	dfc00515 	stw	ra,20(sp)
     cdc:	df000415 	stw	fp,16(sp)
     ce0:	df000404 	addi	fp,sp,16
     ce4:	e13ffd15 	stw	r4,-12(fp)
     ce8:	e17ffe15 	stw	r5,-8(fp)
     cec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     cf0:	e0bffd17 	ldw	r2,-12(fp)
     cf4:	10800017 	ldw	r2,0(r2)
     cf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     cfc:	e0bffc17 	ldw	r2,-16(fp)
     d00:	11000a04 	addi	r4,r2,40
     d04:	e0bffd17 	ldw	r2,-12(fp)
     d08:	11c00217 	ldw	r7,8(r2)
     d0c:	e17ffe17 	ldw	r5,-8(fp)
     d10:	e1bfff17 	ldw	r6,-4(fp)
     d14:	000131c0 	call	131c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     d18:	e037883a 	mov	sp,fp
     d1c:	dfc00117 	ldw	ra,4(sp)
     d20:	df000017 	ldw	fp,0(sp)
     d24:	dec00204 	addi	sp,sp,8
     d28:	f800283a 	ret

00000d2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     d2c:	defffa04 	addi	sp,sp,-24
     d30:	dfc00515 	stw	ra,20(sp)
     d34:	df000415 	stw	fp,16(sp)
     d38:	df000404 	addi	fp,sp,16
     d3c:	e13ffd15 	stw	r4,-12(fp)
     d40:	e17ffe15 	stw	r5,-8(fp)
     d44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d48:	e0bffd17 	ldw	r2,-12(fp)
     d4c:	10800017 	ldw	r2,0(r2)
     d50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     d54:	e0bffc17 	ldw	r2,-16(fp)
     d58:	11000a04 	addi	r4,r2,40
     d5c:	e0bffd17 	ldw	r2,-12(fp)
     d60:	11c00217 	ldw	r7,8(r2)
     d64:	e17ffe17 	ldw	r5,-8(fp)
     d68:	e1bfff17 	ldw	r6,-4(fp)
     d6c:	00015400 	call	1540 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     d70:	e037883a 	mov	sp,fp
     d74:	dfc00117 	ldw	ra,4(sp)
     d78:	df000017 	ldw	fp,0(sp)
     d7c:	dec00204 	addi	sp,sp,8
     d80:	f800283a 	ret

00000d84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     d84:	defffc04 	addi	sp,sp,-16
     d88:	dfc00315 	stw	ra,12(sp)
     d8c:	df000215 	stw	fp,8(sp)
     d90:	df000204 	addi	fp,sp,8
     d94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d98:	e0bfff17 	ldw	r2,-4(fp)
     d9c:	10800017 	ldw	r2,0(r2)
     da0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     da4:	e0bffe17 	ldw	r2,-8(fp)
     da8:	11000a04 	addi	r4,r2,40
     dac:	e0bfff17 	ldw	r2,-4(fp)
     db0:	11400217 	ldw	r5,8(r2)
     db4:	00011b40 	call	11b4 <altera_avalon_jtag_uart_close>
}
     db8:	e037883a 	mov	sp,fp
     dbc:	dfc00117 	ldw	ra,4(sp)
     dc0:	df000017 	ldw	fp,0(sp)
     dc4:	dec00204 	addi	sp,sp,8
     dc8:	f800283a 	ret

00000dcc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     dcc:	defffa04 	addi	sp,sp,-24
     dd0:	dfc00515 	stw	ra,20(sp)
     dd4:	df000415 	stw	fp,16(sp)
     dd8:	df000404 	addi	fp,sp,16
     ddc:	e13ffd15 	stw	r4,-12(fp)
     de0:	e17ffe15 	stw	r5,-8(fp)
     de4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     de8:	e0bffd17 	ldw	r2,-12(fp)
     dec:	10800017 	ldw	r2,0(r2)
     df0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     df4:	e0bffc17 	ldw	r2,-16(fp)
     df8:	11000a04 	addi	r4,r2,40
     dfc:	e17ffe17 	ldw	r5,-8(fp)
     e00:	e1bfff17 	ldw	r6,-4(fp)
     e04:	00012280 	call	1228 <altera_avalon_jtag_uart_ioctl>
}
     e08:	e037883a 	mov	sp,fp
     e0c:	dfc00117 	ldw	ra,4(sp)
     e10:	df000017 	ldw	fp,0(sp)
     e14:	dec00204 	addi	sp,sp,8
     e18:	f800283a 	ret

00000e1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     e1c:	defffa04 	addi	sp,sp,-24
     e20:	dfc00515 	stw	ra,20(sp)
     e24:	df000415 	stw	fp,16(sp)
     e28:	df000404 	addi	fp,sp,16
     e2c:	e13ffd15 	stw	r4,-12(fp)
     e30:	e17ffe15 	stw	r5,-8(fp)
     e34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e38:	e0fffd17 	ldw	r3,-12(fp)
     e3c:	00800044 	movi	r2,1
     e40:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     e44:	e0bffd17 	ldw	r2,-12(fp)
     e48:	10800017 	ldw	r2,0(r2)
     e4c:	11000104 	addi	r4,r2,4
     e50:	e0bffd17 	ldw	r2,-12(fp)
     e54:	10800817 	ldw	r2,32(r2)
     e58:	1007883a 	mov	r3,r2
     e5c:	2005883a 	mov	r2,r4
     e60:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     e64:	e13ffe17 	ldw	r4,-8(fp)
     e68:	e17fff17 	ldw	r5,-4(fp)
     e6c:	d8000015 	stw	zero,0(sp)
     e70:	01800034 	movhi	r6,0
     e74:	3183b704 	addi	r6,r6,3804
     e78:	e1fffd17 	ldw	r7,-12(fp)
     e7c:	000264c0 	call	264c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     e80:	e0bffd17 	ldw	r2,-12(fp)
     e84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     e88:	e0bffd17 	ldw	r2,-12(fp)
     e8c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     e90:	00800034 	movhi	r2,0
     e94:	10997c04 	addi	r2,r2,26096
     e98:	10800017 	ldw	r2,0(r2)
     e9c:	100b883a 	mov	r5,r2
     ea0:	01800034 	movhi	r6,0
     ea4:	31844104 	addi	r6,r6,4356
     ea8:	e1fffd17 	ldw	r7,-12(fp)
     eac:	00020b40 	call	20b4 <alt_alarm_start>
     eb0:	1004403a 	cmpge	r2,r2,zero
     eb4:	1000041e 	bne	r2,zero,ec8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     eb8:	e0fffd17 	ldw	r3,-12(fp)
     ebc:	00a00034 	movhi	r2,32768
     ec0:	10bfffc4 	addi	r2,r2,-1
     ec4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     ec8:	e037883a 	mov	sp,fp
     ecc:	dfc00117 	ldw	ra,4(sp)
     ed0:	df000017 	ldw	fp,0(sp)
     ed4:	dec00204 	addi	sp,sp,8
     ed8:	f800283a 	ret

00000edc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     edc:	defff804 	addi	sp,sp,-32
     ee0:	df000715 	stw	fp,28(sp)
     ee4:	df000704 	addi	fp,sp,28
     ee8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     eec:	e0bfff17 	ldw	r2,-4(fp)
     ef0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
     ef4:	e0bffe17 	ldw	r2,-8(fp)
     ef8:	10800017 	ldw	r2,0(r2)
     efc:	e0bffd15 	stw	r2,-12(fp)
     f00:	00000006 	br	f04 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f04:	e0bffd17 	ldw	r2,-12(fp)
     f08:	10800104 	addi	r2,r2,4
     f0c:	10800037 	ldwio	r2,0(r2)
     f10:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     f14:	e0bffc17 	ldw	r2,-16(fp)
     f18:	1080c00c 	andi	r2,r2,768
     f1c:	1005003a 	cmpeq	r2,r2,zero
     f20:	1000741e 	bne	r2,zero,10f4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     f24:	e0bffc17 	ldw	r2,-16(fp)
     f28:	1080400c 	andi	r2,r2,256
     f2c:	1005003a 	cmpeq	r2,r2,zero
     f30:	1000351e 	bne	r2,zero,1008 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     f34:	00800074 	movhi	r2,1
     f38:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f3c:	e0bffe17 	ldw	r2,-8(fp)
     f40:	10800a17 	ldw	r2,40(r2)
     f44:	10800044 	addi	r2,r2,1
     f48:	1081ffcc 	andi	r2,r2,2047
     f4c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
     f50:	e0bffe17 	ldw	r2,-8(fp)
     f54:	10c00b17 	ldw	r3,44(r2)
     f58:	e0bffa17 	ldw	r2,-24(fp)
     f5c:	18801626 	beq	r3,r2,fb8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     f60:	e0bffd17 	ldw	r2,-12(fp)
     f64:	10800037 	ldwio	r2,0(r2)
     f68:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     f6c:	e0bffb17 	ldw	r2,-20(fp)
     f70:	10a0000c 	andi	r2,r2,32768
     f74:	1005003a 	cmpeq	r2,r2,zero
     f78:	10000f1e 	bne	r2,zero,fb8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     f7c:	e0bffe17 	ldw	r2,-8(fp)
     f80:	10c00a17 	ldw	r3,40(r2)
     f84:	e0bffb17 	ldw	r2,-20(fp)
     f88:	1009883a 	mov	r4,r2
     f8c:	e0bffe17 	ldw	r2,-8(fp)
     f90:	1885883a 	add	r2,r3,r2
     f94:	10800e04 	addi	r2,r2,56
     f98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f9c:	e0bffe17 	ldw	r2,-8(fp)
     fa0:	10800a17 	ldw	r2,40(r2)
     fa4:	10800044 	addi	r2,r2,1
     fa8:	10c1ffcc 	andi	r3,r2,2047
     fac:	e0bffe17 	ldw	r2,-8(fp)
     fb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     fb4:	003fe106 	br	f3c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     fb8:	e0bffb17 	ldw	r2,-20(fp)
     fbc:	10bfffec 	andhi	r2,r2,65535
     fc0:	1005003a 	cmpeq	r2,r2,zero
     fc4:	1000101e 	bne	r2,zero,1008 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     fc8:	e0bffe17 	ldw	r2,-8(fp)
     fcc:	10c00817 	ldw	r3,32(r2)
     fd0:	00bfff84 	movi	r2,-2
     fd4:	1886703a 	and	r3,r3,r2
     fd8:	e0bffe17 	ldw	r2,-8(fp)
     fdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     fe0:	e0bffd17 	ldw	r2,-12(fp)
     fe4:	11000104 	addi	r4,r2,4
     fe8:	e0bffe17 	ldw	r2,-8(fp)
     fec:	10800817 	ldw	r2,32(r2)
     ff0:	1007883a 	mov	r3,r2
     ff4:	2005883a 	mov	r2,r4
     ff8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ffc:	e0bffd17 	ldw	r2,-12(fp)
    1000:	10800104 	addi	r2,r2,4
    1004:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1008:	e0bffc17 	ldw	r2,-16(fp)
    100c:	1080800c 	andi	r2,r2,512
    1010:	1005003a 	cmpeq	r2,r2,zero
    1014:	103fbb1e 	bne	r2,zero,f04 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1018:	e0bffc17 	ldw	r2,-16(fp)
    101c:	10bfffec 	andhi	r2,r2,65535
    1020:	1004d43a 	srli	r2,r2,16
    1024:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1028:	00001506 	br	1080 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    102c:	e13ffd17 	ldw	r4,-12(fp)
    1030:	e0bffe17 	ldw	r2,-8(fp)
    1034:	10c00d17 	ldw	r3,52(r2)
    1038:	e0bffe17 	ldw	r2,-8(fp)
    103c:	1885883a 	add	r2,r3,r2
    1040:	10820e04 	addi	r2,r2,2104
    1044:	10800003 	ldbu	r2,0(r2)
    1048:	10c03fcc 	andi	r3,r2,255
    104c:	18c0201c 	xori	r3,r3,128
    1050:	18ffe004 	addi	r3,r3,-128
    1054:	2005883a 	mov	r2,r4
    1058:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    105c:	e0bffe17 	ldw	r2,-8(fp)
    1060:	10800d17 	ldw	r2,52(r2)
    1064:	10800044 	addi	r2,r2,1
    1068:	10c1ffcc 	andi	r3,r2,2047
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1074:	e0bff917 	ldw	r2,-28(fp)
    1078:	10bfffc4 	addi	r2,r2,-1
    107c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1080:	e0bff917 	ldw	r2,-28(fp)
    1084:	1005003a 	cmpeq	r2,r2,zero
    1088:	1000051e 	bne	r2,zero,10a0 <altera_avalon_jtag_uart_irq+0x1c4>
    108c:	e0bffe17 	ldw	r2,-8(fp)
    1090:	10c00d17 	ldw	r3,52(r2)
    1094:	e0bffe17 	ldw	r2,-8(fp)
    1098:	10800c17 	ldw	r2,48(r2)
    109c:	18bfe31e 	bne	r3,r2,102c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    10a0:	e0bff917 	ldw	r2,-28(fp)
    10a4:	1005003a 	cmpeq	r2,r2,zero
    10a8:	103f961e 	bne	r2,zero,f04 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    10ac:	e0bffe17 	ldw	r2,-8(fp)
    10b0:	10c00817 	ldw	r3,32(r2)
    10b4:	00bfff44 	movi	r2,-3
    10b8:	1886703a 	and	r3,r3,r2
    10bc:	e0bffe17 	ldw	r2,-8(fp)
    10c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10c4:	e0bffe17 	ldw	r2,-8(fp)
    10c8:	10800017 	ldw	r2,0(r2)
    10cc:	11000104 	addi	r4,r2,4
    10d0:	e0bffe17 	ldw	r2,-8(fp)
    10d4:	10800817 	ldw	r2,32(r2)
    10d8:	1007883a 	mov	r3,r2
    10dc:	2005883a 	mov	r2,r4
    10e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    10e4:	e0bffd17 	ldw	r2,-12(fp)
    10e8:	10800104 	addi	r2,r2,4
    10ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    10f0:	003f8406 	br	f04 <altera_avalon_jtag_uart_irq+0x28>
}
    10f4:	e037883a 	mov	sp,fp
    10f8:	df000017 	ldw	fp,0(sp)
    10fc:	dec00104 	addi	sp,sp,4
    1100:	f800283a 	ret

00001104 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1104:	defffc04 	addi	sp,sp,-16
    1108:	df000315 	stw	fp,12(sp)
    110c:	df000304 	addi	fp,sp,12
    1110:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1114:	e0bfff17 	ldw	r2,-4(fp)
    1118:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    111c:	e0bffe17 	ldw	r2,-8(fp)
    1120:	10800017 	ldw	r2,0(r2)
    1124:	10800104 	addi	r2,r2,4
    1128:	10800037 	ldwio	r2,0(r2)
    112c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1130:	e0bffd17 	ldw	r2,-12(fp)
    1134:	1081000c 	andi	r2,r2,1024
    1138:	1005003a 	cmpeq	r2,r2,zero
    113c:	10000c1e 	bne	r2,zero,1170 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1140:	e0bffe17 	ldw	r2,-8(fp)
    1144:	10800017 	ldw	r2,0(r2)
    1148:	11000104 	addi	r4,r2,4
    114c:	e0bffe17 	ldw	r2,-8(fp)
    1150:	10800817 	ldw	r2,32(r2)
    1154:	10810014 	ori	r2,r2,1024
    1158:	1007883a 	mov	r3,r2
    115c:	2005883a 	mov	r2,r4
    1160:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    1164:	e0bffe17 	ldw	r2,-8(fp)
    1168:	10000915 	stw	zero,36(r2)
    116c:	00000a06 	br	1198 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1170:	e0bffe17 	ldw	r2,-8(fp)
    1174:	10c00917 	ldw	r3,36(r2)
    1178:	00a00034 	movhi	r2,32768
    117c:	10bfff04 	addi	r2,r2,-4
    1180:	10c00536 	bltu	r2,r3,1198 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    1184:	e0bffe17 	ldw	r2,-8(fp)
    1188:	10800917 	ldw	r2,36(r2)
    118c:	10c00044 	addi	r3,r2,1
    1190:	e0bffe17 	ldw	r2,-8(fp)
    1194:	10c00915 	stw	r3,36(r2)
    1198:	00800034 	movhi	r2,0
    119c:	10997c04 	addi	r2,r2,26096
    11a0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    11a4:	e037883a 	mov	sp,fp
    11a8:	df000017 	ldw	fp,0(sp)
    11ac:	dec00104 	addi	sp,sp,4
    11b0:	f800283a 	ret

000011b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    11b4:	defffc04 	addi	sp,sp,-16
    11b8:	df000315 	stw	fp,12(sp)
    11bc:	df000304 	addi	fp,sp,12
    11c0:	e13ffd15 	stw	r4,-12(fp)
    11c4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    11c8:	00000706 	br	11e8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    11cc:	e0bffe17 	ldw	r2,-8(fp)
    11d0:	1090000c 	andi	r2,r2,16384
    11d4:	1005003a 	cmpeq	r2,r2,zero
    11d8:	1000031e 	bne	r2,zero,11e8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    11dc:	00bffd44 	movi	r2,-11
    11e0:	e0bfff15 	stw	r2,-4(fp)
    11e4:	00000b06 	br	1214 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    11e8:	e0bffd17 	ldw	r2,-12(fp)
    11ec:	10c00d17 	ldw	r3,52(r2)
    11f0:	e0bffd17 	ldw	r2,-12(fp)
    11f4:	10800c17 	ldw	r2,48(r2)
    11f8:	18800526 	beq	r3,r2,1210 <altera_avalon_jtag_uart_close+0x5c>
    11fc:	e0bffd17 	ldw	r2,-12(fp)
    1200:	10c00917 	ldw	r3,36(r2)
    1204:	e0bffd17 	ldw	r2,-12(fp)
    1208:	10800117 	ldw	r2,4(r2)
    120c:	18bfef36 	bltu	r3,r2,11cc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1210:	e03fff15 	stw	zero,-4(fp)
    1214:	e0bfff17 	ldw	r2,-4(fp)
}
    1218:	e037883a 	mov	sp,fp
    121c:	df000017 	ldw	fp,0(sp)
    1220:	dec00104 	addi	sp,sp,4
    1224:	f800283a 	ret

00001228 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1228:	defff804 	addi	sp,sp,-32
    122c:	df000715 	stw	fp,28(sp)
    1230:	df000704 	addi	fp,sp,28
    1234:	e13ffb15 	stw	r4,-20(fp)
    1238:	e17ffc15 	stw	r5,-16(fp)
    123c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    1240:	00bff9c4 	movi	r2,-25
    1244:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1248:	e0bffc17 	ldw	r2,-16(fp)
    124c:	e0bfff15 	stw	r2,-4(fp)
    1250:	e0ffff17 	ldw	r3,-4(fp)
    1254:	189a8060 	cmpeqi	r2,r3,27137
    1258:	1000041e 	bne	r2,zero,126c <altera_avalon_jtag_uart_ioctl+0x44>
    125c:	e0ffff17 	ldw	r3,-4(fp)
    1260:	189a80a0 	cmpeqi	r2,r3,27138
    1264:	10001b1e 	bne	r2,zero,12d4 <altera_avalon_jtag_uart_ioctl+0xac>
    1268:	00002706 	br	1308 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10c00117 	ldw	r3,4(r2)
    1274:	00a00034 	movhi	r2,32768
    1278:	10bfffc4 	addi	r2,r2,-1
    127c:	18802226 	beq	r3,r2,1308 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    1280:	e0bffd17 	ldw	r2,-12(fp)
    1284:	10800017 	ldw	r2,0(r2)
    1288:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    128c:	e0bff917 	ldw	r2,-28(fp)
    1290:	10800090 	cmplti	r2,r2,2
    1294:	1000071e 	bne	r2,zero,12b4 <altera_avalon_jtag_uart_ioctl+0x8c>
    1298:	e0fff917 	ldw	r3,-28(fp)
    129c:	00a00034 	movhi	r2,32768
    12a0:	10bfffc4 	addi	r2,r2,-1
    12a4:	18800326 	beq	r3,r2,12b4 <altera_avalon_jtag_uart_ioctl+0x8c>
    12a8:	e0bff917 	ldw	r2,-28(fp)
    12ac:	e0bffe15 	stw	r2,-8(fp)
    12b0:	00000306 	br	12c0 <altera_avalon_jtag_uart_ioctl+0x98>
    12b4:	00e00034 	movhi	r3,32768
    12b8:	18ffff84 	addi	r3,r3,-2
    12bc:	e0fffe15 	stw	r3,-8(fp)
    12c0:	e0bffb17 	ldw	r2,-20(fp)
    12c4:	e0fffe17 	ldw	r3,-8(fp)
    12c8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    12cc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    12d0:	00000d06 	br	1308 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    12d4:	e0bffb17 	ldw	r2,-20(fp)
    12d8:	10c00117 	ldw	r3,4(r2)
    12dc:	00a00034 	movhi	r2,32768
    12e0:	10bfffc4 	addi	r2,r2,-1
    12e4:	18800826 	beq	r3,r2,1308 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    12e8:	e13ffd17 	ldw	r4,-12(fp)
    12ec:	e0bffb17 	ldw	r2,-20(fp)
    12f0:	10c00917 	ldw	r3,36(r2)
    12f4:	e0bffb17 	ldw	r2,-20(fp)
    12f8:	10800117 	ldw	r2,4(r2)
    12fc:	1885803a 	cmpltu	r2,r3,r2
    1300:	20800015 	stw	r2,0(r4)
      rc = 0;
    1304:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    1308:	e0bffa17 	ldw	r2,-24(fp)
}
    130c:	e037883a 	mov	sp,fp
    1310:	df000017 	ldw	fp,0(sp)
    1314:	dec00104 	addi	sp,sp,4
    1318:	f800283a 	ret

0000131c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    131c:	defff204 	addi	sp,sp,-56
    1320:	dfc00d15 	stw	ra,52(sp)
    1324:	df000c15 	stw	fp,48(sp)
    1328:	df000c04 	addi	fp,sp,48
    132c:	e13ffb15 	stw	r4,-20(fp)
    1330:	e17ffc15 	stw	r5,-16(fp)
    1334:	e1bffd15 	stw	r6,-12(fp)
    1338:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    133c:	e0bffc17 	ldw	r2,-16(fp)
    1340:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1344:	00004806 	br	1468 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1348:	e0bffb17 	ldw	r2,-20(fp)
    134c:	10800a17 	ldw	r2,40(r2)
    1350:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1354:	e0bffb17 	ldw	r2,-20(fp)
    1358:	10800b17 	ldw	r2,44(r2)
    135c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    1360:	e0fff717 	ldw	r3,-36(fp)
    1364:	e0bff617 	ldw	r2,-40(fp)
    1368:	18800536 	bltu	r3,r2,1380 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    136c:	e0bff717 	ldw	r2,-36(fp)
    1370:	e0fff617 	ldw	r3,-40(fp)
    1374:	10c5c83a 	sub	r2,r2,r3
    1378:	e0bff815 	stw	r2,-32(fp)
    137c:	00000406 	br	1390 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1380:	00820004 	movi	r2,2048
    1384:	e0fff617 	ldw	r3,-40(fp)
    1388:	10c5c83a 	sub	r2,r2,r3
    138c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    1390:	e0bff817 	ldw	r2,-32(fp)
    1394:	1005003a 	cmpeq	r2,r2,zero
    1398:	10001f1e 	bne	r2,zero,1418 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    139c:	e0fffd17 	ldw	r3,-12(fp)
    13a0:	e0bff817 	ldw	r2,-32(fp)
    13a4:	1880022e 	bgeu	r3,r2,13b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    13a8:	e0bffd17 	ldw	r2,-12(fp)
    13ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    13b0:	e0bffb17 	ldw	r2,-20(fp)
    13b4:	10c00e04 	addi	r3,r2,56
    13b8:	e0bff617 	ldw	r2,-40(fp)
    13bc:	1887883a 	add	r3,r3,r2
    13c0:	e0bffa17 	ldw	r2,-24(fp)
    13c4:	1009883a 	mov	r4,r2
    13c8:	180b883a 	mov	r5,r3
    13cc:	e1bff817 	ldw	r6,-32(fp)
    13d0:	00007480 	call	748 <memcpy>
      ptr   += n;
    13d4:	e0fff817 	ldw	r3,-32(fp)
    13d8:	e0bffa17 	ldw	r2,-24(fp)
    13dc:	10c5883a 	add	r2,r2,r3
    13e0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    13e4:	e0fffd17 	ldw	r3,-12(fp)
    13e8:	e0bff817 	ldw	r2,-32(fp)
    13ec:	1885c83a 	sub	r2,r3,r2
    13f0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13f4:	e0fff617 	ldw	r3,-40(fp)
    13f8:	e0bff817 	ldw	r2,-32(fp)
    13fc:	1885883a 	add	r2,r3,r2
    1400:	10c1ffcc 	andi	r3,r2,2047
    1404:	e0bffb17 	ldw	r2,-20(fp)
    1408:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    140c:	e0bffd17 	ldw	r2,-12(fp)
    1410:	10800048 	cmpgei	r2,r2,1
    1414:	103fcc1e 	bne	r2,zero,1348 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    1418:	e0fffa17 	ldw	r3,-24(fp)
    141c:	e0bffc17 	ldw	r2,-16(fp)
    1420:	1880141e 	bne	r3,r2,1474 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1424:	e0bffe17 	ldw	r2,-8(fp)
    1428:	1090000c 	andi	r2,r2,16384
    142c:	1004c03a 	cmpne	r2,r2,zero
    1430:	1000101e 	bne	r2,zero,1474 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1434:	e0bffb17 	ldw	r2,-20(fp)
    1438:	10c00a17 	ldw	r3,40(r2)
    143c:	e0bff717 	ldw	r2,-36(fp)
    1440:	1880051e 	bne	r3,r2,1458 <altera_avalon_jtag_uart_read+0x13c>
    1444:	e0bffb17 	ldw	r2,-20(fp)
    1448:	10c00917 	ldw	r3,36(r2)
    144c:	e0bffb17 	ldw	r2,-20(fp)
    1450:	10800117 	ldw	r2,4(r2)
    1454:	18bff736 	bltu	r3,r2,1434 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1458:	e0bffb17 	ldw	r2,-20(fp)
    145c:	10c00a17 	ldw	r3,40(r2)
    1460:	e0bff717 	ldw	r2,-36(fp)
    1464:	18800326 	beq	r3,r2,1474 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1468:	e0bffd17 	ldw	r2,-12(fp)
    146c:	10800048 	cmpgei	r2,r2,1
    1470:	103fb51e 	bne	r2,zero,1348 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1474:	e0fffa17 	ldw	r3,-24(fp)
    1478:	e0bffc17 	ldw	r2,-16(fp)
    147c:	18801926 	beq	r3,r2,14e4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1480:	0005303a 	rdctl	r2,status
    1484:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1488:	e0fff517 	ldw	r3,-44(fp)
    148c:	00bfff84 	movi	r2,-2
    1490:	1884703a 	and	r2,r3,r2
    1494:	1001703a 	wrctl	status,r2
  
  return context;
    1498:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    149c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    14a0:	e0bffb17 	ldw	r2,-20(fp)
    14a4:	10800817 	ldw	r2,32(r2)
    14a8:	10c00054 	ori	r3,r2,1
    14ac:	e0bffb17 	ldw	r2,-20(fp)
    14b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14b4:	e0bffb17 	ldw	r2,-20(fp)
    14b8:	10800017 	ldw	r2,0(r2)
    14bc:	11000104 	addi	r4,r2,4
    14c0:	e0bffb17 	ldw	r2,-20(fp)
    14c4:	10800817 	ldw	r2,32(r2)
    14c8:	1007883a 	mov	r3,r2
    14cc:	2005883a 	mov	r2,r4
    14d0:	10c00035 	stwio	r3,0(r2)
    14d4:	e0bff917 	ldw	r2,-28(fp)
    14d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14dc:	e0bff417 	ldw	r2,-48(fp)
    14e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    14e4:	e0fffa17 	ldw	r3,-24(fp)
    14e8:	e0bffc17 	ldw	r2,-16(fp)
    14ec:	18800526 	beq	r3,r2,1504 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    14f0:	e0fffa17 	ldw	r3,-24(fp)
    14f4:	e0bffc17 	ldw	r2,-16(fp)
    14f8:	1887c83a 	sub	r3,r3,r2
    14fc:	e0ffff15 	stw	r3,-4(fp)
    1500:	00000906 	br	1528 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    1504:	e0bffe17 	ldw	r2,-8(fp)
    1508:	1090000c 	andi	r2,r2,16384
    150c:	1005003a 	cmpeq	r2,r2,zero
    1510:	1000031e 	bne	r2,zero,1520 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1514:	00bffd44 	movi	r2,-11
    1518:	e0bfff15 	stw	r2,-4(fp)
    151c:	00000206 	br	1528 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    1520:	00bffec4 	movi	r2,-5
    1524:	e0bfff15 	stw	r2,-4(fp)
    1528:	e0bfff17 	ldw	r2,-4(fp)
}
    152c:	e037883a 	mov	sp,fp
    1530:	dfc00117 	ldw	ra,4(sp)
    1534:	df000017 	ldw	fp,0(sp)
    1538:	dec00204 	addi	sp,sp,8
    153c:	f800283a 	ret

00001540 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1540:	defff204 	addi	sp,sp,-56
    1544:	dfc00d15 	stw	ra,52(sp)
    1548:	df000c15 	stw	fp,48(sp)
    154c:	df000c04 	addi	fp,sp,48
    1550:	e13ffb15 	stw	r4,-20(fp)
    1554:	e17ffc15 	stw	r5,-16(fp)
    1558:	e1bffd15 	stw	r6,-12(fp)
    155c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1560:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1564:	e0bffc17 	ldw	r2,-16(fp)
    1568:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    156c:	00003a06 	br	1658 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1570:	e0bffb17 	ldw	r2,-20(fp)
    1574:	10800c17 	ldw	r2,48(r2)
    1578:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    157c:	e0bffb17 	ldw	r2,-20(fp)
    1580:	10800d17 	ldw	r2,52(r2)
    1584:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    1588:	e0fffa17 	ldw	r3,-24(fp)
    158c:	e0bff917 	ldw	r2,-28(fp)
    1590:	1880062e 	bgeu	r3,r2,15ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1594:	e0fff917 	ldw	r3,-28(fp)
    1598:	e0bffa17 	ldw	r2,-24(fp)
    159c:	1885c83a 	sub	r2,r3,r2
    15a0:	10bfffc4 	addi	r2,r2,-1
    15a4:	e0bff815 	stw	r2,-32(fp)
    15a8:	00000c06 	br	15dc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    15ac:	e0bff917 	ldw	r2,-28(fp)
    15b0:	1005003a 	cmpeq	r2,r2,zero
    15b4:	1000051e 	bne	r2,zero,15cc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    15b8:	00820004 	movi	r2,2048
    15bc:	e0fffa17 	ldw	r3,-24(fp)
    15c0:	10c5c83a 	sub	r2,r2,r3
    15c4:	e0bff815 	stw	r2,-32(fp)
    15c8:	00000406 	br	15dc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    15cc:	0081ffc4 	movi	r2,2047
    15d0:	e0fffa17 	ldw	r3,-24(fp)
    15d4:	10c5c83a 	sub	r2,r2,r3
    15d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    15dc:	e0bff817 	ldw	r2,-32(fp)
    15e0:	1005003a 	cmpeq	r2,r2,zero
    15e4:	10001f1e 	bne	r2,zero,1664 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    15e8:	e0fffd17 	ldw	r3,-12(fp)
    15ec:	e0bff817 	ldw	r2,-32(fp)
    15f0:	1880022e 	bgeu	r3,r2,15fc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    15f4:	e0bffd17 	ldw	r2,-12(fp)
    15f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    15fc:	e0bffb17 	ldw	r2,-20(fp)
    1600:	10c20e04 	addi	r3,r2,2104
    1604:	e0bffa17 	ldw	r2,-24(fp)
    1608:	1885883a 	add	r2,r3,r2
    160c:	e0fffc17 	ldw	r3,-16(fp)
    1610:	1009883a 	mov	r4,r2
    1614:	180b883a 	mov	r5,r3
    1618:	e1bff817 	ldw	r6,-32(fp)
    161c:	00007480 	call	748 <memcpy>
      ptr   += n;
    1620:	e0fff817 	ldw	r3,-32(fp)
    1624:	e0bffc17 	ldw	r2,-16(fp)
    1628:	10c5883a 	add	r2,r2,r3
    162c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    1630:	e0fffd17 	ldw	r3,-12(fp)
    1634:	e0bff817 	ldw	r2,-32(fp)
    1638:	1885c83a 	sub	r2,r3,r2
    163c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1640:	e0fffa17 	ldw	r3,-24(fp)
    1644:	e0bff817 	ldw	r2,-32(fp)
    1648:	1885883a 	add	r2,r3,r2
    164c:	10c1ffcc 	andi	r3,r2,2047
    1650:	e0bffb17 	ldw	r2,-20(fp)
    1654:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1658:	e0bffd17 	ldw	r2,-12(fp)
    165c:	10800048 	cmpgei	r2,r2,1
    1660:	103fc31e 	bne	r2,zero,1570 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1664:	0005303a 	rdctl	r2,status
    1668:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    166c:	e0fff517 	ldw	r3,-44(fp)
    1670:	00bfff84 	movi	r2,-2
    1674:	1884703a 	and	r2,r3,r2
    1678:	1001703a 	wrctl	status,r2
  
  return context;
    167c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1680:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1684:	e0bffb17 	ldw	r2,-20(fp)
    1688:	10800817 	ldw	r2,32(r2)
    168c:	10c00094 	ori	r3,r2,2
    1690:	e0bffb17 	ldw	r2,-20(fp)
    1694:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1698:	e0bffb17 	ldw	r2,-20(fp)
    169c:	10800017 	ldw	r2,0(r2)
    16a0:	11000104 	addi	r4,r2,4
    16a4:	e0bffb17 	ldw	r2,-20(fp)
    16a8:	10800817 	ldw	r2,32(r2)
    16ac:	1007883a 	mov	r3,r2
    16b0:	2005883a 	mov	r2,r4
    16b4:	10c00035 	stwio	r3,0(r2)
    16b8:	e0bff717 	ldw	r2,-36(fp)
    16bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16c0:	e0bff417 	ldw	r2,-48(fp)
    16c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    16c8:	e0bffd17 	ldw	r2,-12(fp)
    16cc:	10800050 	cmplti	r2,r2,1
    16d0:	1000111e 	bne	r2,zero,1718 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    16d4:	e0bffe17 	ldw	r2,-8(fp)
    16d8:	1090000c 	andi	r2,r2,16384
    16dc:	1004c03a 	cmpne	r2,r2,zero
    16e0:	1000101e 	bne	r2,zero,1724 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    16e4:	e0bffb17 	ldw	r2,-20(fp)
    16e8:	10c00d17 	ldw	r3,52(r2)
    16ec:	e0bff917 	ldw	r2,-28(fp)
    16f0:	1880051e 	bne	r3,r2,1708 <altera_avalon_jtag_uart_write+0x1c8>
    16f4:	e0bffb17 	ldw	r2,-20(fp)
    16f8:	10c00917 	ldw	r3,36(r2)
    16fc:	e0bffb17 	ldw	r2,-20(fp)
    1700:	10800117 	ldw	r2,4(r2)
    1704:	18bff736 	bltu	r3,r2,16e4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    1708:	e0bffb17 	ldw	r2,-20(fp)
    170c:	10c00d17 	ldw	r3,52(r2)
    1710:	e0bff917 	ldw	r2,-28(fp)
    1714:	18800326 	beq	r3,r2,1724 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    1718:	e0bffd17 	ldw	r2,-12(fp)
    171c:	10800048 	cmpgei	r2,r2,1
    1720:	103fcd1e 	bne	r2,zero,1658 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1724:	e0fffc17 	ldw	r3,-16(fp)
    1728:	e0bff617 	ldw	r2,-40(fp)
    172c:	18800526 	beq	r3,r2,1744 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    1730:	e0fffc17 	ldw	r3,-16(fp)
    1734:	e0bff617 	ldw	r2,-40(fp)
    1738:	1887c83a 	sub	r3,r3,r2
    173c:	e0ffff15 	stw	r3,-4(fp)
    1740:	00000906 	br	1768 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1744:	e0bffe17 	ldw	r2,-8(fp)
    1748:	1090000c 	andi	r2,r2,16384
    174c:	1005003a 	cmpeq	r2,r2,zero
    1750:	1000031e 	bne	r2,zero,1760 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    1754:	00bffd44 	movi	r2,-11
    1758:	e0bfff15 	stw	r2,-4(fp)
    175c:	00000206 	br	1768 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1760:	00bffec4 	movi	r2,-5
    1764:	e0bfff15 	stw	r2,-4(fp)
    1768:	e0bfff17 	ldw	r2,-4(fp)
}
    176c:	e037883a 	mov	sp,fp
    1770:	dfc00117 	ldw	ra,4(sp)
    1774:	df000017 	ldw	fp,0(sp)
    1778:	dec00204 	addi	sp,sp,8
    177c:	f800283a 	ret

00001780 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1780:	defffa04 	addi	sp,sp,-24
    1784:	dfc00515 	stw	ra,20(sp)
    1788:	df000415 	stw	fp,16(sp)
    178c:	df000404 	addi	fp,sp,16
    1790:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1794:	e0bfff17 	ldw	r2,-4(fp)
    1798:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    179c:	e0bfff17 	ldw	r2,-4(fp)
    17a0:	10800104 	addi	r2,r2,4
    17a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17a8:	0005303a 	rdctl	r2,status
    17ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17b0:	e0fffd17 	ldw	r3,-12(fp)
    17b4:	00bfff84 	movi	r2,-2
    17b8:	1884703a 	and	r2,r3,r2
    17bc:	1001703a 	wrctl	status,r2
  
  return context;
    17c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    17c4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    17c8:	0002e100 	call	2e10 <alt_tick>
    17cc:	e0bffe17 	ldw	r2,-8(fp)
    17d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17d4:	e0bffc17 	ldw	r2,-16(fp)
    17d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    17dc:	e037883a 	mov	sp,fp
    17e0:	dfc00117 	ldw	ra,4(sp)
    17e4:	df000017 	ldw	fp,0(sp)
    17e8:	dec00204 	addi	sp,sp,8
    17ec:	f800283a 	ret

000017f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    17f0:	defff804 	addi	sp,sp,-32
    17f4:	dfc00715 	stw	ra,28(sp)
    17f8:	df000615 	stw	fp,24(sp)
    17fc:	df000604 	addi	fp,sp,24
    1800:	e13ffc15 	stw	r4,-16(fp)
    1804:	e17ffd15 	stw	r5,-12(fp)
    1808:	e1bffe15 	stw	r6,-8(fp)
    180c:	e1ffff15 	stw	r7,-4(fp)
    1810:	e0bfff17 	ldw	r2,-4(fp)
    1814:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1818:	00800034 	movhi	r2,0
    181c:	10997c04 	addi	r2,r2,26096
    1820:	10800017 	ldw	r2,0(r2)
    1824:	1004c03a 	cmpne	r2,r2,zero
    1828:	1000041e 	bne	r2,zero,183c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    182c:	00c00034 	movhi	r3,0
    1830:	18d97c04 	addi	r3,r3,26096
    1834:	e0bffb17 	ldw	r2,-20(fp)
    1838:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    183c:	e0bffc17 	ldw	r2,-16(fp)
    1840:	10800104 	addi	r2,r2,4
    1844:	1007883a 	mov	r3,r2
    1848:	008001c4 	movi	r2,7
    184c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    1850:	d8000015 	stw	zero,0(sp)
    1854:	e13ffd17 	ldw	r4,-12(fp)
    1858:	e17ffe17 	ldw	r5,-8(fp)
    185c:	01800034 	movhi	r6,0
    1860:	3185e004 	addi	r6,r6,6016
    1864:	e1fffc17 	ldw	r7,-16(fp)
    1868:	000264c0 	call	264c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    186c:	e037883a 	mov	sp,fp
    1870:	dfc00117 	ldw	ra,4(sp)
    1874:	df000017 	ldw	fp,0(sp)
    1878:	dec00204 	addi	sp,sp,8
    187c:	f800283a 	ret

00001880 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    1880:	defffc04 	addi	sp,sp,-16
    1884:	df000315 	stw	fp,12(sp)
    1888:	df000304 	addi	fp,sp,12
    188c:	e13ffe15 	stw	r4,-8(fp)
    1890:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    1894:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    1898:	e0bfff17 	ldw	r2,-4(fp)
    189c:	1004c03a 	cmpne	r2,r2,zero
    18a0:	1000061e 	bne	r2,zero,18bc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    18a4:	e0bffe17 	ldw	r2,-8(fp)
    18a8:	1007883a 	mov	r3,r2
    18ac:	e0bffd03 	ldbu	r2,-12(fp)
    18b0:	10c4b03a 	or	r2,r2,r3
    18b4:	e0bffd05 	stb	r2,-12(fp)
    18b8:	00000806 	br	18dc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    18bc:	e0bffe17 	ldw	r2,-8(fp)
    18c0:	1007883a 	mov	r3,r2
    18c4:	e0bffd03 	ldbu	r2,-12(fp)
    18c8:	10c4b03a 	or	r2,r2,r3
    18cc:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    18d0:	e0bffd03 	ldbu	r2,-12(fp)
    18d4:	10801014 	ori	r2,r2,64
    18d8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    18dc:	e0fffd03 	ldbu	r3,-12(fp)
    18e0:	00bfe004 	movi	r2,-128
    18e4:	1884b03a 	or	r2,r3,r2
    18e8:	10803fcc 	andi	r2,r2,255
}
    18ec:	e037883a 	mov	sp,fp
    18f0:	df000017 	ldw	fp,0(sp)
    18f4:	dec00104 	addi	sp,sp,4
    18f8:	f800283a 	ret

000018fc <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    18fc:	defffd04 	addi	sp,sp,-12
    1900:	df000215 	stw	fp,8(sp)
    1904:	df000204 	addi	fp,sp,8
    1908:	e13ffe15 	stw	r4,-8(fp)
    190c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1910:	e0bffe17 	ldw	r2,-8(fp)
    1914:	10800a17 	ldw	r2,40(r2)
    1918:	e0ffff03 	ldbu	r3,-4(fp)
    191c:	10c00025 	stbio	r3,0(r2)
}
    1920:	e037883a 	mov	sp,fp
    1924:	df000017 	ldw	fp,0(sp)
    1928:	dec00104 	addi	sp,sp,4
    192c:	f800283a 	ret

00001930 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    1930:	defffe04 	addi	sp,sp,-8
    1934:	df000115 	stw	fp,4(sp)
    1938:	df000104 	addi	fp,sp,4
    193c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1940:	e0bfff17 	ldw	r2,-4(fp)
    1944:	10800a17 	ldw	r2,40(r2)
    1948:	1007883a 	mov	r3,r2
    194c:	00800044 	movi	r2,1
    1950:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    1954:	e037883a 	mov	sp,fp
    1958:	df000017 	ldw	fp,0(sp)
    195c:	dec00104 	addi	sp,sp,4
    1960:	f800283a 	ret

00001964 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    1964:	defffc04 	addi	sp,sp,-16
    1968:	dfc00315 	stw	ra,12(sp)
    196c:	df000215 	stw	fp,8(sp)
    1970:	df000204 	addi	fp,sp,8
    1974:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1978:	e13fff17 	ldw	r4,-4(fp)
    197c:	01400034 	movhi	r5,0
    1980:	2953b004 	addi	r5,r5,20160
    1984:	00025880 	call	2588 <alt_find_dev>
    1988:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    198c:	e0bffe17 	ldw	r2,-8(fp)
}
    1990:	e037883a 	mov	sp,fp
    1994:	dfc00117 	ldw	ra,4(sp)
    1998:	df000017 	ldw	fp,0(sp)
    199c:	dec00204 	addi	sp,sp,8
    19a0:	f800283a 	ret

000019a4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    19a4:	defffb04 	addi	sp,sp,-20
    19a8:	df000415 	stw	fp,16(sp)
    19ac:	df000404 	addi	fp,sp,16
    19b0:	e13ffd15 	stw	r4,-12(fp)
    19b4:	e17ffe15 	stw	r5,-8(fp)
    19b8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    19bc:	e03ffc15 	stw	zero,-16(fp)
    19c0:	00000f06 	br	1a00 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    19c4:	e0bffd17 	ldw	r2,-12(fp)
    19c8:	10800a17 	ldw	r2,40(r2)
    19cc:	11000044 	addi	r4,r2,1
    19d0:	e0fffc17 	ldw	r3,-16(fp)
    19d4:	e0bffe17 	ldw	r2,-8(fp)
    19d8:	1885883a 	add	r2,r3,r2
    19dc:	10800003 	ldbu	r2,0(r2)
    19e0:	10c03fcc 	andi	r3,r2,255
    19e4:	18c0201c 	xori	r3,r3,128
    19e8:	18ffe004 	addi	r3,r3,-128
    19ec:	2005883a 	mov	r2,r4
    19f0:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    19f4:	e0bffc17 	ldw	r2,-16(fp)
    19f8:	10800044 	addi	r2,r2,1
    19fc:	e0bffc15 	stw	r2,-16(fp)
    1a00:	e0fffc17 	ldw	r3,-16(fp)
    1a04:	e0bfff17 	ldw	r2,-4(fp)
    1a08:	18bfee36 	bltu	r3,r2,19c4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    1a0c:	e037883a 	mov	sp,fp
    1a10:	df000017 	ldw	fp,0(sp)
    1a14:	dec00104 	addi	sp,sp,4
    1a18:	f800283a 	ret

00001a1c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    1a1c:	defffd04 	addi	sp,sp,-12
    1a20:	df000215 	stw	fp,8(sp)
    1a24:	df000204 	addi	fp,sp,8
    1a28:	e13ffe15 	stw	r4,-8(fp)
    1a2c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    1a30:	00000d06 	br	1a68 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1a34:	e0bffe17 	ldw	r2,-8(fp)
    1a38:	10800a17 	ldw	r2,40(r2)
    1a3c:	11000044 	addi	r4,r2,1
    1a40:	e0bfff17 	ldw	r2,-4(fp)
    1a44:	10800003 	ldbu	r2,0(r2)
    1a48:	10c03fcc 	andi	r3,r2,255
    1a4c:	18c0201c 	xori	r3,r3,128
    1a50:	18ffe004 	addi	r3,r3,-128
    1a54:	2005883a 	mov	r2,r4
    1a58:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1a5c:	e0bfff17 	ldw	r2,-4(fp)
    1a60:	10800044 	addi	r2,r2,1
    1a64:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1a68:	e0bfff17 	ldw	r2,-4(fp)
    1a6c:	10800003 	ldbu	r2,0(r2)
    1a70:	10803fcc 	andi	r2,r2,255
    1a74:	1080201c 	xori	r2,r2,128
    1a78:	10bfe004 	addi	r2,r2,-128
    1a7c:	1004c03a 	cmpne	r2,r2,zero
    1a80:	103fec1e 	bne	r2,zero,1a34 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    1a84:	e037883a 	mov	sp,fp
    1a88:	df000017 	ldw	fp,0(sp)
    1a8c:	dec00104 	addi	sp,sp,4
    1a90:	f800283a 	ret

00001a94 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    1a94:	defffb04 	addi	sp,sp,-20
    1a98:	dfc00415 	stw	ra,16(sp)
    1a9c:	df000315 	stw	fp,12(sp)
    1aa0:	df000304 	addi	fp,sp,12
    1aa4:	e13ffd15 	stw	r4,-12(fp)
    1aa8:	e17ffe15 	stw	r5,-8(fp)
    1aac:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1ab0:	e0bffd17 	ldw	r2,-12(fp)
    1ab4:	10800017 	ldw	r2,0(r2)
    1ab8:	1009883a 	mov	r4,r2
    1abc:	e1bfff17 	ldw	r6,-4(fp)
    1ac0:	e17ffe17 	ldw	r5,-8(fp)
    1ac4:	00019a40 	call	19a4 <alt_up_character_lcd_write>
	return 0;
    1ac8:	0005883a 	mov	r2,zero
}
    1acc:	e037883a 	mov	sp,fp
    1ad0:	dfc00117 	ldw	ra,4(sp)
    1ad4:	df000017 	ldw	fp,0(sp)
    1ad8:	dec00204 	addi	sp,sp,8
    1adc:	f800283a 	ret

00001ae0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    1ae0:	defff904 	addi	sp,sp,-28
    1ae4:	dfc00615 	stw	ra,24(sp)
    1ae8:	df000515 	stw	fp,20(sp)
    1aec:	df000504 	addi	fp,sp,20
    1af0:	e13ffc15 	stw	r4,-16(fp)
    1af4:	e17ffd15 	stw	r5,-12(fp)
    1af8:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    1afc:	e0bffd17 	ldw	r2,-12(fp)
    1b00:	10800a28 	cmpgeui	r2,r2,40
    1b04:	1000031e 	bne	r2,zero,1b14 <alt_up_character_lcd_set_cursor_pos+0x34>
    1b08:	e0bffe17 	ldw	r2,-8(fp)
    1b0c:	108000b0 	cmpltui	r2,r2,2
    1b10:	1000031e 	bne	r2,zero,1b20 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    1b14:	00bfffc4 	movi	r2,-1
    1b18:	e0bfff15 	stw	r2,-4(fp)
    1b1c:	00000806 	br	1b40 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1b20:	e13ffd17 	ldw	r4,-12(fp)
    1b24:	e17ffe17 	ldw	r5,-8(fp)
    1b28:	00018800 	call	1880 <get_DDRAM_addr>
    1b2c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    1b30:	e17ffb03 	ldbu	r5,-20(fp)
    1b34:	e13ffc17 	ldw	r4,-16(fp)
    1b38:	00018fc0 	call	18fc <alt_up_character_lcd_send_cmd>
	return 0;
    1b3c:	e03fff15 	stw	zero,-4(fp)
    1b40:	e0bfff17 	ldw	r2,-4(fp)
}
    1b44:	e037883a 	mov	sp,fp
    1b48:	dfc00117 	ldw	ra,4(sp)
    1b4c:	df000017 	ldw	fp,0(sp)
    1b50:	dec00204 	addi	sp,sp,8
    1b54:	f800283a 	ret

00001b58 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1b58:	defff904 	addi	sp,sp,-28
    1b5c:	dfc00615 	stw	ra,24(sp)
    1b60:	df000515 	stw	fp,20(sp)
    1b64:	df000504 	addi	fp,sp,20
    1b68:	e13ffc15 	stw	r4,-16(fp)
    1b6c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    1b70:	e0bffd17 	ldw	r2,-12(fp)
    1b74:	1005003a 	cmpeq	r2,r2,zero
    1b78:	10001e1e 	bne	r2,zero,1bf4 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1b7c:	e0bffd17 	ldw	r2,-12(fp)
    1b80:	10800050 	cmplti	r2,r2,1
    1b84:	1000031e 	bne	r2,zero,1b94 <alt_up_character_lcd_shift_cursor+0x3c>
    1b88:	00800504 	movi	r2,20
    1b8c:	e0bfff05 	stb	r2,-4(fp)
    1b90:	00000206 	br	1b9c <alt_up_character_lcd_shift_cursor+0x44>
    1b94:	00c00404 	movi	r3,16
    1b98:	e0ffff05 	stb	r3,-4(fp)
    1b9c:	e0bfff03 	ldbu	r2,-4(fp)
    1ba0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1ba4:	e0fffd17 	ldw	r3,-12(fp)
    1ba8:	e0fffe15 	stw	r3,-8(fp)
    1bac:	e0fffe17 	ldw	r3,-8(fp)
    1bb0:	1804403a 	cmpge	r2,r3,zero
    1bb4:	1000031e 	bne	r2,zero,1bc4 <alt_up_character_lcd_shift_cursor+0x6c>
    1bb8:	e0bffe17 	ldw	r2,-8(fp)
    1bbc:	0085c83a 	sub	r2,zero,r2
    1bc0:	e0bffe15 	stw	r2,-8(fp)
    1bc4:	e0fffe17 	ldw	r3,-8(fp)
    1bc8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1bcc:	00000306 	br	1bdc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1bd0:	e17ffb43 	ldbu	r5,-19(fp)
    1bd4:	e13ffc17 	ldw	r4,-16(fp)
    1bd8:	00018fc0 	call	18fc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1bdc:	e0bffb03 	ldbu	r2,-20(fp)
    1be0:	10bfffc4 	addi	r2,r2,-1
    1be4:	e0bffb05 	stb	r2,-20(fp)
    1be8:	e0bffb03 	ldbu	r2,-20(fp)
    1bec:	10803fd8 	cmpnei	r2,r2,255
    1bf0:	103ff71e 	bne	r2,zero,1bd0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1bf4:	e037883a 	mov	sp,fp
    1bf8:	dfc00117 	ldw	ra,4(sp)
    1bfc:	df000017 	ldw	fp,0(sp)
    1c00:	dec00204 	addi	sp,sp,8
    1c04:	f800283a 	ret

00001c08 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1c08:	defff904 	addi	sp,sp,-28
    1c0c:	dfc00615 	stw	ra,24(sp)
    1c10:	df000515 	stw	fp,20(sp)
    1c14:	df000504 	addi	fp,sp,20
    1c18:	e13ffc15 	stw	r4,-16(fp)
    1c1c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    1c20:	e0bffd17 	ldw	r2,-12(fp)
    1c24:	1005003a 	cmpeq	r2,r2,zero
    1c28:	10001e1e 	bne	r2,zero,1ca4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    1c2c:	e0bffd17 	ldw	r2,-12(fp)
    1c30:	10800050 	cmplti	r2,r2,1
    1c34:	1000031e 	bne	r2,zero,1c44 <alt_up_character_lcd_shift_display+0x3c>
    1c38:	00800704 	movi	r2,28
    1c3c:	e0bfff05 	stb	r2,-4(fp)
    1c40:	00000206 	br	1c4c <alt_up_character_lcd_shift_display+0x44>
    1c44:	00c00604 	movi	r3,24
    1c48:	e0ffff05 	stb	r3,-4(fp)
    1c4c:	e0bfff03 	ldbu	r2,-4(fp)
    1c50:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    1c54:	e0fffd17 	ldw	r3,-12(fp)
    1c58:	e0fffe15 	stw	r3,-8(fp)
    1c5c:	e0fffe17 	ldw	r3,-8(fp)
    1c60:	1804403a 	cmpge	r2,r3,zero
    1c64:	1000031e 	bne	r2,zero,1c74 <alt_up_character_lcd_shift_display+0x6c>
    1c68:	e0bffe17 	ldw	r2,-8(fp)
    1c6c:	0085c83a 	sub	r2,zero,r2
    1c70:	e0bffe15 	stw	r2,-8(fp)
    1c74:	e0fffe17 	ldw	r3,-8(fp)
    1c78:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1c7c:	00000306 	br	1c8c <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1c80:	e17ffb43 	ldbu	r5,-19(fp)
    1c84:	e13ffc17 	ldw	r4,-16(fp)
    1c88:	00018fc0 	call	18fc <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1c8c:	e0bffb03 	ldbu	r2,-20(fp)
    1c90:	10bfffc4 	addi	r2,r2,-1
    1c94:	e0bffb05 	stb	r2,-20(fp)
    1c98:	e0bffb03 	ldbu	r2,-20(fp)
    1c9c:	10803fd8 	cmpnei	r2,r2,255
    1ca0:	103ff71e 	bne	r2,zero,1c80 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    1ca4:	e037883a 	mov	sp,fp
    1ca8:	dfc00117 	ldw	ra,4(sp)
    1cac:	df000017 	ldw	fp,0(sp)
    1cb0:	dec00204 	addi	sp,sp,8
    1cb4:	f800283a 	ret

00001cb8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1cb8:	defff904 	addi	sp,sp,-28
    1cbc:	dfc00615 	stw	ra,24(sp)
    1cc0:	df000515 	stw	fp,20(sp)
    1cc4:	df000504 	addi	fp,sp,20
    1cc8:	e13ffc15 	stw	r4,-16(fp)
    1ccc:	e17ffd15 	stw	r5,-12(fp)
    1cd0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1cd4:	e0bffd17 	ldw	r2,-12(fp)
    1cd8:	10800a28 	cmpgeui	r2,r2,40
    1cdc:	1000031e 	bne	r2,zero,1cec <alt_up_character_lcd_erase_pos+0x34>
    1ce0:	e0bffe17 	ldw	r2,-8(fp)
    1ce4:	108000b0 	cmpltui	r2,r2,2
    1ce8:	1000031e 	bne	r2,zero,1cf8 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    1cec:	00bfffc4 	movi	r2,-1
    1cf0:	e0bfff15 	stw	r2,-4(fp)
    1cf4:	00000e06 	br	1d30 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    1cf8:	e13ffd17 	ldw	r4,-12(fp)
    1cfc:	e17ffe17 	ldw	r5,-8(fp)
    1d00:	00018800 	call	1880 <get_DDRAM_addr>
    1d04:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    1d08:	e17ffb03 	ldbu	r5,-20(fp)
    1d0c:	e13ffc17 	ldw	r4,-16(fp)
    1d10:	00018fc0 	call	18fc <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    1d14:	e0bffc17 	ldw	r2,-16(fp)
    1d18:	10800a17 	ldw	r2,40(r2)
    1d1c:	10800044 	addi	r2,r2,1
    1d20:	1007883a 	mov	r3,r2
    1d24:	00800084 	movi	r2,2
    1d28:	18800025 	stbio	r2,0(r3)
	return 0;
    1d2c:	e03fff15 	stw	zero,-4(fp)
    1d30:	e0bfff17 	ldw	r2,-4(fp)
}
    1d34:	e037883a 	mov	sp,fp
    1d38:	dfc00117 	ldw	ra,4(sp)
    1d3c:	df000017 	ldw	fp,0(sp)
    1d40:	dec00204 	addi	sp,sp,8
    1d44:	f800283a 	ret

00001d48 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    1d48:	defffd04 	addi	sp,sp,-12
    1d4c:	dfc00215 	stw	ra,8(sp)
    1d50:	df000115 	stw	fp,4(sp)
    1d54:	df000104 	addi	fp,sp,4
    1d58:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1d5c:	e13fff17 	ldw	r4,-4(fp)
    1d60:	01400304 	movi	r5,12
    1d64:	00018fc0 	call	18fc <alt_up_character_lcd_send_cmd>
}
    1d68:	e037883a 	mov	sp,fp
    1d6c:	dfc00117 	ldw	ra,4(sp)
    1d70:	df000017 	ldw	fp,0(sp)
    1d74:	dec00204 	addi	sp,sp,8
    1d78:	f800283a 	ret

00001d7c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    1d7c:	defffd04 	addi	sp,sp,-12
    1d80:	dfc00215 	stw	ra,8(sp)
    1d84:	df000115 	stw	fp,4(sp)
    1d88:	df000104 	addi	fp,sp,4
    1d8c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    1d90:	e13fff17 	ldw	r4,-4(fp)
    1d94:	014003c4 	movi	r5,15
    1d98:	00018fc0 	call	18fc <alt_up_character_lcd_send_cmd>
}
    1d9c:	e037883a 	mov	sp,fp
    1da0:	dfc00117 	ldw	ra,4(sp)
    1da4:	df000017 	ldw	fp,0(sp)
    1da8:	dec00204 	addi	sp,sp,8
    1dac:	f800283a 	ret

00001db0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1db0:	defffc04 	addi	sp,sp,-16
    1db4:	dfc00315 	stw	ra,12(sp)
    1db8:	df000215 	stw	fp,8(sp)
    1dbc:	df000204 	addi	fp,sp,8
    1dc0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1dc4:	e0bfff17 	ldw	r2,-4(fp)
    1dc8:	10800217 	ldw	r2,8(r2)
    1dcc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    1dd0:	00000c06 	br	1e04 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1dd4:	e13ffe17 	ldw	r4,-8(fp)
    1dd8:	01400034 	movhi	r5,0
    1ddc:	294def04 	addi	r5,r5,14268
    1de0:	00032640 	call	3264 <strcmp>
    1de4:	1004c03a 	cmpne	r2,r2,zero
    1de8:	1000031e 	bne	r2,zero,1df8 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    1dec:	e0bffe17 	ldw	r2,-8(fp)
    1df0:	10000005 	stb	zero,0(r2)
			break;
    1df4:	00000a06 	br	1e20 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1df8:	e0bffe17 	ldw	r2,-8(fp)
    1dfc:	10800044 	addi	r2,r2,1
    1e00:	e0bffe15 	stw	r2,-8(fp)
    1e04:	e0bffe17 	ldw	r2,-8(fp)
    1e08:	10800003 	ldbu	r2,0(r2)
    1e0c:	10803fcc 	andi	r2,r2,255
    1e10:	1080201c 	xori	r2,r2,128
    1e14:	10bfe004 	addi	r2,r2,-128
    1e18:	1004c03a 	cmpne	r2,r2,zero
    1e1c:	103fed1e 	bne	r2,zero,1dd4 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    1e20:	e037883a 	mov	sp,fp
    1e24:	dfc00117 	ldw	ra,4(sp)
    1e28:	df000017 	ldw	fp,0(sp)
    1e2c:	dec00204 	addi	sp,sp,8
    1e30:	f800283a 	ret

00001e34 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1e34:	defffc04 	addi	sp,sp,-16
    1e38:	dfc00315 	stw	ra,12(sp)
    1e3c:	df000215 	stw	fp,8(sp)
    1e40:	df000204 	addi	fp,sp,8
    1e44:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1e48:	e13fff17 	ldw	r4,-4(fp)
    1e4c:	01400034 	movhi	r5,0
    1e50:	2953b004 	addi	r5,r5,20160
    1e54:	00025880 	call	2588 <alt_find_dev>
    1e58:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1e5c:	e0bffe17 	ldw	r2,-8(fp)
}
    1e60:	e037883a 	mov	sp,fp
    1e64:	dfc00117 	ldw	ra,4(sp)
    1e68:	df000017 	ldw	fp,0(sp)
    1e6c:	dec00204 	addi	sp,sp,8
    1e70:	f800283a 	ret

00001e74 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    1e74:	defff904 	addi	sp,sp,-28
    1e78:	df000615 	stw	fp,24(sp)
    1e7c:	df000604 	addi	fp,sp,24
    1e80:	e13ffb15 	stw	r4,-20(fp)
    1e84:	e1bffd15 	stw	r6,-12(fp)
    1e88:	e1fffe15 	stw	r7,-8(fp)
    1e8c:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1e90:	e0bffb17 	ldw	r2,-20(fp)
    1e94:	10c00c17 	ldw	r3,48(r2)
    1e98:	e0bffd17 	ldw	r2,-12(fp)
    1e9c:	10c0042e 	bgeu	r2,r3,1eb0 <alt_up_char_buffer_draw+0x3c>
    1ea0:	e0bffb17 	ldw	r2,-20(fp)
    1ea4:	10c00d17 	ldw	r3,52(r2)
    1ea8:	e0bffe17 	ldw	r2,-8(fp)
    1eac:	10c00336 	bltu	r2,r3,1ebc <alt_up_char_buffer_draw+0x48>
		return -1;
    1eb0:	00bfffc4 	movi	r2,-1
    1eb4:	e0bfff15 	stw	r2,-4(fp)
    1eb8:	00001d06 	br	1f30 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    1ebc:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    1ec0:	e0bffb17 	ldw	r2,-20(fp)
    1ec4:	10c00f17 	ldw	r3,60(r2)
    1ec8:	e0bffd17 	ldw	r2,-12(fp)
    1ecc:	1886703a 	and	r3,r3,r2
    1ed0:	e0bffb17 	ldw	r2,-20(fp)
    1ed4:	10800e17 	ldw	r2,56(r2)
    1ed8:	1886983a 	sll	r3,r3,r2
    1edc:	e0bffa17 	ldw	r2,-24(fp)
    1ee0:	10c4b03a 	or	r2,r2,r3
    1ee4:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    1ee8:	e0bffb17 	ldw	r2,-20(fp)
    1eec:	10c01117 	ldw	r3,68(r2)
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	1886703a 	and	r3,r3,r2
    1ef8:	e0bffb17 	ldw	r2,-20(fp)
    1efc:	10801017 	ldw	r2,64(r2)
    1f00:	1886983a 	sll	r3,r3,r2
    1f04:	e0bffa17 	ldw	r2,-24(fp)
    1f08:	10c4b03a 	or	r2,r2,r3
    1f0c:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1f10:	e0bffb17 	ldw	r2,-20(fp)
    1f14:	10800b17 	ldw	r2,44(r2)
    1f18:	1007883a 	mov	r3,r2
    1f1c:	e0bffa17 	ldw	r2,-24(fp)
    1f20:	1885883a 	add	r2,r3,r2
    1f24:	e0fffc03 	ldbu	r3,-16(fp)
    1f28:	10c00025 	stbio	r3,0(r2)

	return 0;
    1f2c:	e03fff15 	stw	zero,-4(fp)
    1f30:	e0bfff17 	ldw	r2,-4(fp)
}
    1f34:	e037883a 	mov	sp,fp
    1f38:	df000017 	ldw	fp,0(sp)
    1f3c:	dec00104 	addi	sp,sp,4
    1f40:	f800283a 	ret

00001f44 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    1f44:	defff904 	addi	sp,sp,-28
    1f48:	df000615 	stw	fp,24(sp)
    1f4c:	df000604 	addi	fp,sp,24
    1f50:	e13ffb15 	stw	r4,-20(fp)
    1f54:	e17ffc15 	stw	r5,-16(fp)
    1f58:	e1bffd15 	stw	r6,-12(fp)
    1f5c:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1f60:	e0bffb17 	ldw	r2,-20(fp)
    1f64:	10c00c17 	ldw	r3,48(r2)
    1f68:	e0bffd17 	ldw	r2,-12(fp)
    1f6c:	10c0042e 	bgeu	r2,r3,1f80 <alt_up_char_buffer_string+0x3c>
    1f70:	e0bffb17 	ldw	r2,-20(fp)
    1f74:	10c00d17 	ldw	r3,52(r2)
    1f78:	e0bffe17 	ldw	r2,-8(fp)
    1f7c:	10c00336 	bltu	r2,r3,1f8c <alt_up_char_buffer_string+0x48>
		return -1;
    1f80:	00bfffc4 	movi	r2,-1
    1f84:	e0bfff15 	stw	r2,-4(fp)
    1f88:	00002e06 	br	2044 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    1f8c:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    1f90:	e0bffb17 	ldw	r2,-20(fp)
    1f94:	10801017 	ldw	r2,64(r2)
    1f98:	1007883a 	mov	r3,r2
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	10c6983a 	sll	r3,r2,r3
    1fa4:	e0bffd17 	ldw	r2,-12(fp)
    1fa8:	1885883a 	add	r2,r3,r2
    1fac:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    1fb0:	00001c06 	br	2024 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1fb4:	e0bffb17 	ldw	r2,-20(fp)
    1fb8:	10800b17 	ldw	r2,44(r2)
    1fbc:	1007883a 	mov	r3,r2
    1fc0:	e0bffa17 	ldw	r2,-24(fp)
    1fc4:	1889883a 	add	r4,r3,r2
    1fc8:	e0bffc17 	ldw	r2,-16(fp)
    1fcc:	10800003 	ldbu	r2,0(r2)
    1fd0:	10c03fcc 	andi	r3,r2,255
    1fd4:	18c0201c 	xori	r3,r3,128
    1fd8:	18ffe004 	addi	r3,r3,-128
    1fdc:	2005883a 	mov	r2,r4
    1fe0:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1fe4:	e0bffc17 	ldw	r2,-16(fp)
    1fe8:	10800044 	addi	r2,r2,1
    1fec:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    1ff0:	e0bffd17 	ldw	r2,-12(fp)
    1ff4:	10800044 	addi	r2,r2,1
    1ff8:	e0bffd15 	stw	r2,-12(fp)
    1ffc:	e0bffb17 	ldw	r2,-20(fp)
    2000:	10c00c17 	ldw	r3,48(r2)
    2004:	e0bffd17 	ldw	r2,-12(fp)
    2008:	10c00336 	bltu	r2,r3,2018 <alt_up_char_buffer_string+0xd4>
			return -1;
    200c:	00bfffc4 	movi	r2,-1
    2010:	e0bfff15 	stw	r2,-4(fp)
    2014:	00000b06 	br	2044 <alt_up_char_buffer_string+0x100>
		++offset;
    2018:	e0bffa17 	ldw	r2,-24(fp)
    201c:	10800044 	addi	r2,r2,1
    2020:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    2024:	e0bffc17 	ldw	r2,-16(fp)
    2028:	10800003 	ldbu	r2,0(r2)
    202c:	10803fcc 	andi	r2,r2,255
    2030:	1080201c 	xori	r2,r2,128
    2034:	10bfe004 	addi	r2,r2,-128
    2038:	1004c03a 	cmpne	r2,r2,zero
    203c:	103fdd1e 	bne	r2,zero,1fb4 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    2040:	e03fff15 	stw	zero,-4(fp)
    2044:	e0bfff17 	ldw	r2,-4(fp)
}
    2048:	e037883a 	mov	sp,fp
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00104 	addi	sp,sp,4
    2054:	f800283a 	ret

00002058 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    2058:	defffe04 	addi	sp,sp,-8
    205c:	df000115 	stw	fp,4(sp)
    2060:	df000104 	addi	fp,sp,4
    2064:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	10800a17 	ldw	r2,40(r2)
    2070:	10800084 	addi	r2,r2,2
    2074:	1007883a 	mov	r3,r2
    2078:	00800044 	movi	r2,1
    207c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    2080:	e0bfff17 	ldw	r2,-4(fp)
    2084:	10800a17 	ldw	r2,40(r2)
    2088:	10800084 	addi	r2,r2,2
    208c:	10800023 	ldbuio	r2,0(r2)
    2090:	1080004c 	andi	r2,r2,1
    2094:	10803fcc 	andi	r2,r2,255
    2098:	1004c03a 	cmpne	r2,r2,zero
    209c:	103ff81e 	bne	r2,zero,2080 <alt_up_char_buffer_clear+0x28>
	return 0;
    20a0:	0005883a 	mov	r2,zero
}
    20a4:	e037883a 	mov	sp,fp
    20a8:	df000017 	ldw	fp,0(sp)
    20ac:	dec00104 	addi	sp,sp,4
    20b0:	f800283a 	ret

000020b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    20b4:	defff404 	addi	sp,sp,-48
    20b8:	df000b15 	stw	fp,44(sp)
    20bc:	df000b04 	addi	fp,sp,44
    20c0:	e13ffb15 	stw	r4,-20(fp)
    20c4:	e17ffc15 	stw	r5,-16(fp)
    20c8:	e1bffd15 	stw	r6,-12(fp)
    20cc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    20d0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    20d4:	00800034 	movhi	r2,0
    20d8:	10997c04 	addi	r2,r2,26096
    20dc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    20e0:	1005003a 	cmpeq	r2,r2,zero
    20e4:	1000411e 	bne	r2,zero,21ec <alt_alarm_start+0x138>
  {
    if (alarm)
    20e8:	e0bffb17 	ldw	r2,-20(fp)
    20ec:	1005003a 	cmpeq	r2,r2,zero
    20f0:	10003b1e 	bne	r2,zero,21e0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    20f4:	e0fffb17 	ldw	r3,-20(fp)
    20f8:	e0bffd17 	ldw	r2,-12(fp)
    20fc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    2100:	e0fffb17 	ldw	r3,-20(fp)
    2104:	e0bffe17 	ldw	r2,-8(fp)
    2108:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    210c:	0005303a 	rdctl	r2,status
    2110:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2114:	e0fff817 	ldw	r3,-32(fp)
    2118:	00bfff84 	movi	r2,-2
    211c:	1884703a 	and	r2,r3,r2
    2120:	1001703a 	wrctl	status,r2
  
  return context;
    2124:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    2128:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    212c:	00800034 	movhi	r2,0
    2130:	10997d04 	addi	r2,r2,26100
    2134:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    2138:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    213c:	e0fffc17 	ldw	r3,-16(fp)
    2140:	e0bff917 	ldw	r2,-28(fp)
    2144:	1885883a 	add	r2,r3,r2
    2148:	10c00044 	addi	r3,r2,1
    214c:	e0bffb17 	ldw	r2,-20(fp)
    2150:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2154:	e0bffb17 	ldw	r2,-20(fp)
    2158:	10c00217 	ldw	r3,8(r2)
    215c:	e0bff917 	ldw	r2,-28(fp)
    2160:	1880042e 	bgeu	r3,r2,2174 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    2164:	e0fffb17 	ldw	r3,-20(fp)
    2168:	00800044 	movi	r2,1
    216c:	18800405 	stb	r2,16(r3)
    2170:	00000206 	br	217c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    2174:	e0bffb17 	ldw	r2,-20(fp)
    2178:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    217c:	e0fffb17 	ldw	r3,-20(fp)
    2180:	00800034 	movhi	r2,0
    2184:	1093b504 	addi	r2,r2,20180
    2188:	e0bff615 	stw	r2,-40(fp)
    218c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2190:	e0fff717 	ldw	r3,-36(fp)
    2194:	e0bff617 	ldw	r2,-40(fp)
    2198:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    219c:	e0bff617 	ldw	r2,-40(fp)
    21a0:	10c00017 	ldw	r3,0(r2)
    21a4:	e0bff717 	ldw	r2,-36(fp)
    21a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    21ac:	e0bff617 	ldw	r2,-40(fp)
    21b0:	10c00017 	ldw	r3,0(r2)
    21b4:	e0bff717 	ldw	r2,-36(fp)
    21b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    21bc:	e0fff617 	ldw	r3,-40(fp)
    21c0:	e0bff717 	ldw	r2,-36(fp)
    21c4:	18800015 	stw	r2,0(r3)
    21c8:	e0bffa17 	ldw	r2,-24(fp)
    21cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21d0:	e0bff517 	ldw	r2,-44(fp)
    21d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    21d8:	e03fff15 	stw	zero,-4(fp)
    21dc:	00000506 	br	21f4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    21e0:	00bffa84 	movi	r2,-22
    21e4:	e0bfff15 	stw	r2,-4(fp)
    21e8:	00000206 	br	21f4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    21ec:	00bfde84 	movi	r2,-134
    21f0:	e0bfff15 	stw	r2,-4(fp)
    21f4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    21f8:	e037883a 	mov	sp,fp
    21fc:	df000017 	ldw	fp,0(sp)
    2200:	dec00104 	addi	sp,sp,4
    2204:	f800283a 	ret

00002208 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2208:	defff804 	addi	sp,sp,-32
    220c:	dfc00715 	stw	ra,28(sp)
    2210:	df000615 	stw	fp,24(sp)
    2214:	df000604 	addi	fp,sp,24
    2218:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    221c:	e0bffc17 	ldw	r2,-16(fp)
    2220:	1004803a 	cmplt	r2,r2,zero
    2224:	1000081e 	bne	r2,zero,2248 <close+0x40>
    2228:	e0bffc17 	ldw	r2,-16(fp)
    222c:	10800324 	muli	r2,r2,12
    2230:	1007883a 	mov	r3,r2
    2234:	00800034 	movhi	r2,0
    2238:	10924e04 	addi	r2,r2,18744
    223c:	1887883a 	add	r3,r3,r2
    2240:	e0ffff15 	stw	r3,-4(fp)
    2244:	00000106 	br	224c <close+0x44>
    2248:	e03fff15 	stw	zero,-4(fp)
    224c:	e0bfff17 	ldw	r2,-4(fp)
    2250:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2254:	e0bffb17 	ldw	r2,-20(fp)
    2258:	1005003a 	cmpeq	r2,r2,zero
    225c:	10001d1e 	bne	r2,zero,22d4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2260:	e0bffb17 	ldw	r2,-20(fp)
    2264:	10800017 	ldw	r2,0(r2)
    2268:	10800417 	ldw	r2,16(r2)
    226c:	1005003a 	cmpeq	r2,r2,zero
    2270:	1000071e 	bne	r2,zero,2290 <close+0x88>
    2274:	e0bffb17 	ldw	r2,-20(fp)
    2278:	10800017 	ldw	r2,0(r2)
    227c:	10800417 	ldw	r2,16(r2)
    2280:	e13ffb17 	ldw	r4,-20(fp)
    2284:	103ee83a 	callr	r2
    2288:	e0bffe15 	stw	r2,-8(fp)
    228c:	00000106 	br	2294 <close+0x8c>
    2290:	e03ffe15 	stw	zero,-8(fp)
    2294:	e0bffe17 	ldw	r2,-8(fp)
    2298:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    229c:	e13ffc17 	ldw	r4,-16(fp)
    22a0:	0002d180 	call	2d18 <alt_release_fd>
    if (rval < 0)
    22a4:	e0bffa17 	ldw	r2,-24(fp)
    22a8:	1004403a 	cmpge	r2,r2,zero
    22ac:	1000071e 	bne	r2,zero,22cc <close+0xc4>
    {
      ALT_ERRNO = -rval;
    22b0:	00023040 	call	2304 <alt_get_errno>
    22b4:	e0fffa17 	ldw	r3,-24(fp)
    22b8:	00c7c83a 	sub	r3,zero,r3
    22bc:	10c00015 	stw	r3,0(r2)
      return -1;
    22c0:	00bfffc4 	movi	r2,-1
    22c4:	e0bffd15 	stw	r2,-12(fp)
    22c8:	00000806 	br	22ec <close+0xe4>
    }
    return 0;
    22cc:	e03ffd15 	stw	zero,-12(fp)
    22d0:	00000606 	br	22ec <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    22d4:	00023040 	call	2304 <alt_get_errno>
    22d8:	1007883a 	mov	r3,r2
    22dc:	00801444 	movi	r2,81
    22e0:	18800015 	stw	r2,0(r3)
    return -1;
    22e4:	00bfffc4 	movi	r2,-1
    22e8:	e0bffd15 	stw	r2,-12(fp)
    22ec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    22f0:	e037883a 	mov	sp,fp
    22f4:	dfc00117 	ldw	ra,4(sp)
    22f8:	df000017 	ldw	fp,0(sp)
    22fc:	dec00204 	addi	sp,sp,8
    2300:	f800283a 	ret

00002304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2304:	defffd04 	addi	sp,sp,-12
    2308:	dfc00215 	stw	ra,8(sp)
    230c:	df000115 	stw	fp,4(sp)
    2310:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2314:	00800034 	movhi	r2,0
    2318:	1093b304 	addi	r2,r2,20172
    231c:	10800017 	ldw	r2,0(r2)
    2320:	1005003a 	cmpeq	r2,r2,zero
    2324:	1000061e 	bne	r2,zero,2340 <alt_get_errno+0x3c>
    2328:	00800034 	movhi	r2,0
    232c:	1093b304 	addi	r2,r2,20172
    2330:	10800017 	ldw	r2,0(r2)
    2334:	103ee83a 	callr	r2
    2338:	e0bfff15 	stw	r2,-4(fp)
    233c:	00000306 	br	234c <alt_get_errno+0x48>
    2340:	00800034 	movhi	r2,0
    2344:	10997e04 	addi	r2,r2,26104
    2348:	e0bfff15 	stw	r2,-4(fp)
    234c:	e0bfff17 	ldw	r2,-4(fp)
}
    2350:	e037883a 	mov	sp,fp
    2354:	dfc00117 	ldw	ra,4(sp)
    2358:	df000017 	ldw	fp,0(sp)
    235c:	dec00204 	addi	sp,sp,8
    2360:	f800283a 	ret

00002364 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2364:	deffff04 	addi	sp,sp,-4
    2368:	df000015 	stw	fp,0(sp)
    236c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2370:	e037883a 	mov	sp,fp
    2374:	df000017 	ldw	fp,0(sp)
    2378:	dec00104 	addi	sp,sp,4
    237c:	f800283a 	ret

00002380 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2380:	defffc04 	addi	sp,sp,-16
    2384:	df000315 	stw	fp,12(sp)
    2388:	df000304 	addi	fp,sp,12
    238c:	e13ffd15 	stw	r4,-12(fp)
    2390:	e17ffe15 	stw	r5,-8(fp)
    2394:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2398:	e0bfff17 	ldw	r2,-4(fp)
}
    239c:	e037883a 	mov	sp,fp
    23a0:	df000017 	ldw	fp,0(sp)
    23a4:	dec00104 	addi	sp,sp,4
    23a8:	f800283a 	ret

000023ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    23ac:	defff904 	addi	sp,sp,-28
    23b0:	dfc00615 	stw	ra,24(sp)
    23b4:	df000515 	stw	fp,20(sp)
    23b8:	df000504 	addi	fp,sp,20
    23bc:	e13ffd15 	stw	r4,-12(fp)
    23c0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    23c4:	e0bffd17 	ldw	r2,-12(fp)
    23c8:	1005003a 	cmpeq	r2,r2,zero
    23cc:	1000041e 	bne	r2,zero,23e0 <alt_dev_llist_insert+0x34>
    23d0:	e0bffd17 	ldw	r2,-12(fp)
    23d4:	10800217 	ldw	r2,8(r2)
    23d8:	1004c03a 	cmpne	r2,r2,zero
    23dc:	1000071e 	bne	r2,zero,23fc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    23e0:	00024600 	call	2460 <alt_get_errno>
    23e4:	1007883a 	mov	r3,r2
    23e8:	00800584 	movi	r2,22
    23ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    23f0:	00bffa84 	movi	r2,-22
    23f4:	e0bfff15 	stw	r2,-4(fp)
    23f8:	00001306 	br	2448 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    23fc:	e0fffd17 	ldw	r3,-12(fp)
    2400:	e0bffe17 	ldw	r2,-8(fp)
    2404:	e0bffb15 	stw	r2,-20(fp)
    2408:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    240c:	e0fffc17 	ldw	r3,-16(fp)
    2410:	e0bffb17 	ldw	r2,-20(fp)
    2414:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2418:	e0bffb17 	ldw	r2,-20(fp)
    241c:	10c00017 	ldw	r3,0(r2)
    2420:	e0bffc17 	ldw	r2,-16(fp)
    2424:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2428:	e0bffb17 	ldw	r2,-20(fp)
    242c:	10c00017 	ldw	r3,0(r2)
    2430:	e0bffc17 	ldw	r2,-16(fp)
    2434:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2438:	e0fffb17 	ldw	r3,-20(fp)
    243c:	e0bffc17 	ldw	r2,-16(fp)
    2440:	18800015 	stw	r2,0(r3)

  return 0;  
    2444:	e03fff15 	stw	zero,-4(fp)
    2448:	e0bfff17 	ldw	r2,-4(fp)
}
    244c:	e037883a 	mov	sp,fp
    2450:	dfc00117 	ldw	ra,4(sp)
    2454:	df000017 	ldw	fp,0(sp)
    2458:	dec00204 	addi	sp,sp,8
    245c:	f800283a 	ret

00002460 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2460:	defffd04 	addi	sp,sp,-12
    2464:	dfc00215 	stw	ra,8(sp)
    2468:	df000115 	stw	fp,4(sp)
    246c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2470:	00800034 	movhi	r2,0
    2474:	1093b304 	addi	r2,r2,20172
    2478:	10800017 	ldw	r2,0(r2)
    247c:	1005003a 	cmpeq	r2,r2,zero
    2480:	1000061e 	bne	r2,zero,249c <alt_get_errno+0x3c>
    2484:	00800034 	movhi	r2,0
    2488:	1093b304 	addi	r2,r2,20172
    248c:	10800017 	ldw	r2,0(r2)
    2490:	103ee83a 	callr	r2
    2494:	e0bfff15 	stw	r2,-4(fp)
    2498:	00000306 	br	24a8 <alt_get_errno+0x48>
    249c:	00800034 	movhi	r2,0
    24a0:	10997e04 	addi	r2,r2,26104
    24a4:	e0bfff15 	stw	r2,-4(fp)
    24a8:	e0bfff17 	ldw	r2,-4(fp)
}
    24ac:	e037883a 	mov	sp,fp
    24b0:	dfc00117 	ldw	ra,4(sp)
    24b4:	df000017 	ldw	fp,0(sp)
    24b8:	dec00204 	addi	sp,sp,8
    24bc:	f800283a 	ret

000024c0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    24c0:	defffd04 	addi	sp,sp,-12
    24c4:	dfc00215 	stw	ra,8(sp)
    24c8:	df000115 	stw	fp,4(sp)
    24cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    24d0:	00bfff04 	movi	r2,-4
    24d4:	00c00034 	movhi	r3,0
    24d8:	18cdb804 	addi	r3,r3,14048
    24dc:	1885883a 	add	r2,r3,r2
    24e0:	e0bfff15 	stw	r2,-4(fp)
    24e4:	00000606 	br	2500 <_do_ctors+0x40>
        (*ctor) (); 
    24e8:	e0bfff17 	ldw	r2,-4(fp)
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    24f4:	e0bfff17 	ldw	r2,-4(fp)
    24f8:	10bfff04 	addi	r2,r2,-4
    24fc:	e0bfff15 	stw	r2,-4(fp)
    2500:	e0ffff17 	ldw	r3,-4(fp)
    2504:	00800034 	movhi	r2,0
    2508:	108db704 	addi	r2,r2,14044
    250c:	18bff62e 	bgeu	r3,r2,24e8 <_do_ctors+0x28>
        (*ctor) (); 
}
    2510:	e037883a 	mov	sp,fp
    2514:	dfc00117 	ldw	ra,4(sp)
    2518:	df000017 	ldw	fp,0(sp)
    251c:	dec00204 	addi	sp,sp,8
    2520:	f800283a 	ret

00002524 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2524:	defffd04 	addi	sp,sp,-12
    2528:	dfc00215 	stw	ra,8(sp)
    252c:	df000115 	stw	fp,4(sp)
    2530:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2534:	00bfff04 	movi	r2,-4
    2538:	00c00034 	movhi	r3,0
    253c:	18cdb804 	addi	r3,r3,14048
    2540:	1885883a 	add	r2,r3,r2
    2544:	e0bfff15 	stw	r2,-4(fp)
    2548:	00000606 	br	2564 <_do_dtors+0x40>
        (*dtor) (); 
    254c:	e0bfff17 	ldw	r2,-4(fp)
    2550:	10800017 	ldw	r2,0(r2)
    2554:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2558:	e0bfff17 	ldw	r2,-4(fp)
    255c:	10bfff04 	addi	r2,r2,-4
    2560:	e0bfff15 	stw	r2,-4(fp)
    2564:	e0ffff17 	ldw	r3,-4(fp)
    2568:	00800034 	movhi	r2,0
    256c:	108db804 	addi	r2,r2,14048
    2570:	18bff62e 	bgeu	r3,r2,254c <_do_dtors+0x28>
        (*dtor) (); 
}
    2574:	e037883a 	mov	sp,fp
    2578:	dfc00117 	ldw	ra,4(sp)
    257c:	df000017 	ldw	fp,0(sp)
    2580:	dec00204 	addi	sp,sp,8
    2584:	f800283a 	ret

00002588 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2588:	defff904 	addi	sp,sp,-28
    258c:	dfc00615 	stw	ra,24(sp)
    2590:	df000515 	stw	fp,20(sp)
    2594:	df000504 	addi	fp,sp,20
    2598:	e13ffd15 	stw	r4,-12(fp)
    259c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    25a0:	e0bffe17 	ldw	r2,-8(fp)
    25a4:	10800017 	ldw	r2,0(r2)
    25a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    25ac:	e13ffd17 	ldw	r4,-12(fp)
    25b0:	00033200 	call	3320 <strlen>
    25b4:	10800044 	addi	r2,r2,1
    25b8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    25bc:	00000d06 	br	25f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    25c0:	e0bffc17 	ldw	r2,-16(fp)
    25c4:	11000217 	ldw	r4,8(r2)
    25c8:	e1bffb17 	ldw	r6,-20(fp)
    25cc:	e17ffd17 	ldw	r5,-12(fp)
    25d0:	00031f00 	call	31f0 <memcmp>
    25d4:	1004c03a 	cmpne	r2,r2,zero
    25d8:	1000031e 	bne	r2,zero,25e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    25dc:	e0bffc17 	ldw	r2,-16(fp)
    25e0:	e0bfff15 	stw	r2,-4(fp)
    25e4:	00000706 	br	2604 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    25e8:	e0bffc17 	ldw	r2,-16(fp)
    25ec:	10800017 	ldw	r2,0(r2)
    25f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    25f4:	e0fffe17 	ldw	r3,-8(fp)
    25f8:	e0bffc17 	ldw	r2,-16(fp)
    25fc:	10fff01e 	bne	r2,r3,25c0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2600:	e03fff15 	stw	zero,-4(fp)
    2604:	e0bfff17 	ldw	r2,-4(fp)
}
    2608:	e037883a 	mov	sp,fp
    260c:	dfc00117 	ldw	ra,4(sp)
    2610:	df000017 	ldw	fp,0(sp)
    2614:	dec00204 	addi	sp,sp,8
    2618:	f800283a 	ret

0000261c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    261c:	defffe04 	addi	sp,sp,-8
    2620:	dfc00115 	stw	ra,4(sp)
    2624:	df000015 	stw	fp,0(sp)
    2628:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    262c:	0009883a 	mov	r4,zero
    2630:	01440004 	movi	r5,4096
    2634:	00031140 	call	3114 <alt_icache_flush>
#endif
}
    2638:	e037883a 	mov	sp,fp
    263c:	dfc00117 	ldw	ra,4(sp)
    2640:	df000017 	ldw	fp,0(sp)
    2644:	dec00204 	addi	sp,sp,8
    2648:	f800283a 	ret

0000264c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    264c:	defff904 	addi	sp,sp,-28
    2650:	dfc00615 	stw	ra,24(sp)
    2654:	df000515 	stw	fp,20(sp)
    2658:	df000504 	addi	fp,sp,20
    265c:	e13ffc15 	stw	r4,-16(fp)
    2660:	e17ffd15 	stw	r5,-12(fp)
    2664:	e1bffe15 	stw	r6,-8(fp)
    2668:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    266c:	e0800217 	ldw	r2,8(fp)
    2670:	d8800015 	stw	r2,0(sp)
    2674:	e13ffc17 	ldw	r4,-16(fp)
    2678:	e17ffd17 	ldw	r5,-12(fp)
    267c:	e1bffe17 	ldw	r6,-8(fp)
    2680:	e1ffff17 	ldw	r7,-4(fp)
    2684:	00028200 	call	2820 <alt_iic_isr_register>
}  
    2688:	e037883a 	mov	sp,fp
    268c:	dfc00117 	ldw	ra,4(sp)
    2690:	df000017 	ldw	fp,0(sp)
    2694:	dec00204 	addi	sp,sp,8
    2698:	f800283a 	ret

0000269c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    269c:	defff904 	addi	sp,sp,-28
    26a0:	df000615 	stw	fp,24(sp)
    26a4:	df000604 	addi	fp,sp,24
    26a8:	e13ffe15 	stw	r4,-8(fp)
    26ac:	e17fff15 	stw	r5,-4(fp)
    26b0:	e0bfff17 	ldw	r2,-4(fp)
    26b4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26b8:	0005303a 	rdctl	r2,status
    26bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26c0:	e0fffb17 	ldw	r3,-20(fp)
    26c4:	00bfff84 	movi	r2,-2
    26c8:	1884703a 	and	r2,r3,r2
    26cc:	1001703a 	wrctl	status,r2
  
  return context;
    26d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    26d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    26d8:	e0fffc17 	ldw	r3,-16(fp)
    26dc:	00800044 	movi	r2,1
    26e0:	10c4983a 	sll	r2,r2,r3
    26e4:	1007883a 	mov	r3,r2
    26e8:	00800034 	movhi	r2,0
    26ec:	10997b04 	addi	r2,r2,26092
    26f0:	10800017 	ldw	r2,0(r2)
    26f4:	1886b03a 	or	r3,r3,r2
    26f8:	00800034 	movhi	r2,0
    26fc:	10997b04 	addi	r2,r2,26092
    2700:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2704:	00800034 	movhi	r2,0
    2708:	10997b04 	addi	r2,r2,26092
    270c:	10800017 	ldw	r2,0(r2)
    2710:	100170fa 	wrctl	ienable,r2
    2714:	e0bffd17 	ldw	r2,-12(fp)
    2718:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    271c:	e0bffa17 	ldw	r2,-24(fp)
    2720:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2724:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    2728:	e037883a 	mov	sp,fp
    272c:	df000017 	ldw	fp,0(sp)
    2730:	dec00104 	addi	sp,sp,4
    2734:	f800283a 	ret

00002738 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    2738:	defff904 	addi	sp,sp,-28
    273c:	df000615 	stw	fp,24(sp)
    2740:	df000604 	addi	fp,sp,24
    2744:	e13ffe15 	stw	r4,-8(fp)
    2748:	e17fff15 	stw	r5,-4(fp)
    274c:	e0bfff17 	ldw	r2,-4(fp)
    2750:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2754:	0005303a 	rdctl	r2,status
    2758:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    275c:	e0fffb17 	ldw	r3,-20(fp)
    2760:	00bfff84 	movi	r2,-2
    2764:	1884703a 	and	r2,r3,r2
    2768:	1001703a 	wrctl	status,r2
  
  return context;
    276c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2770:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    2774:	e0fffc17 	ldw	r3,-16(fp)
    2778:	00800044 	movi	r2,1
    277c:	10c4983a 	sll	r2,r2,r3
    2780:	0084303a 	nor	r2,zero,r2
    2784:	1007883a 	mov	r3,r2
    2788:	00800034 	movhi	r2,0
    278c:	10997b04 	addi	r2,r2,26092
    2790:	10800017 	ldw	r2,0(r2)
    2794:	1886703a 	and	r3,r3,r2
    2798:	00800034 	movhi	r2,0
    279c:	10997b04 	addi	r2,r2,26092
    27a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    27a4:	00800034 	movhi	r2,0
    27a8:	10997b04 	addi	r2,r2,26092
    27ac:	10800017 	ldw	r2,0(r2)
    27b0:	100170fa 	wrctl	ienable,r2
    27b4:	e0bffd17 	ldw	r2,-12(fp)
    27b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    27bc:	e0bffa17 	ldw	r2,-24(fp)
    27c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    27c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    27c8:	e037883a 	mov	sp,fp
    27cc:	df000017 	ldw	fp,0(sp)
    27d0:	dec00104 	addi	sp,sp,4
    27d4:	f800283a 	ret

000027d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    27d8:	defffc04 	addi	sp,sp,-16
    27dc:	df000315 	stw	fp,12(sp)
    27e0:	df000304 	addi	fp,sp,12
    27e4:	e13ffe15 	stw	r4,-8(fp)
    27e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    27ec:	000530fa 	rdctl	r2,ienable
    27f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    27f4:	e0ffff17 	ldw	r3,-4(fp)
    27f8:	00800044 	movi	r2,1
    27fc:	10c4983a 	sll	r2,r2,r3
    2800:	1007883a 	mov	r3,r2
    2804:	e0bffd17 	ldw	r2,-12(fp)
    2808:	1884703a 	and	r2,r3,r2
    280c:	1004c03a 	cmpne	r2,r2,zero
}
    2810:	e037883a 	mov	sp,fp
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00104 	addi	sp,sp,4
    281c:	f800283a 	ret

00002820 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2820:	defff404 	addi	sp,sp,-48
    2824:	dfc00b15 	stw	ra,44(sp)
    2828:	df000a15 	stw	fp,40(sp)
    282c:	df000a04 	addi	fp,sp,40
    2830:	e13ffb15 	stw	r4,-20(fp)
    2834:	e17ffc15 	stw	r5,-16(fp)
    2838:	e1bffd15 	stw	r6,-12(fp)
    283c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    2840:	00bffa84 	movi	r2,-22
    2844:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2848:	e0bffc17 	ldw	r2,-16(fp)
    284c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2850:	e0bff917 	ldw	r2,-28(fp)
    2854:	10800808 	cmpgei	r2,r2,32
    2858:	1000291e 	bne	r2,zero,2900 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    285c:	0005303a 	rdctl	r2,status
    2860:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2864:	e0fff717 	ldw	r3,-36(fp)
    2868:	00bfff84 	movi	r2,-2
    286c:	1884703a 	and	r2,r3,r2
    2870:	1001703a 	wrctl	status,r2
  
  return context;
    2874:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2878:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    287c:	e0bff917 	ldw	r2,-28(fp)
    2880:	00c00034 	movhi	r3,0
    2884:	18d97f04 	addi	r3,r3,26108
    2888:	100490fa 	slli	r2,r2,3
    288c:	10c7883a 	add	r3,r2,r3
    2890:	e0bffd17 	ldw	r2,-12(fp)
    2894:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    2898:	e0bff917 	ldw	r2,-28(fp)
    289c:	00c00034 	movhi	r3,0
    28a0:	18d97f04 	addi	r3,r3,26108
    28a4:	100490fa 	slli	r2,r2,3
    28a8:	10c5883a 	add	r2,r2,r3
    28ac:	10c00104 	addi	r3,r2,4
    28b0:	e0bffe17 	ldw	r2,-8(fp)
    28b4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    28b8:	e0bffd17 	ldw	r2,-12(fp)
    28bc:	1005003a 	cmpeq	r2,r2,zero
    28c0:	1000051e 	bne	r2,zero,28d8 <alt_iic_isr_register+0xb8>
    28c4:	e17ff917 	ldw	r5,-28(fp)
    28c8:	e13ffb17 	ldw	r4,-20(fp)
    28cc:	000269c0 	call	269c <alt_ic_irq_enable>
    28d0:	e0bfff15 	stw	r2,-4(fp)
    28d4:	00000406 	br	28e8 <alt_iic_isr_register+0xc8>
    28d8:	e17ff917 	ldw	r5,-28(fp)
    28dc:	e13ffb17 	ldw	r4,-20(fp)
    28e0:	00027380 	call	2738 <alt_ic_irq_disable>
    28e4:	e0bfff15 	stw	r2,-4(fp)
    28e8:	e0bfff17 	ldw	r2,-4(fp)
    28ec:	e0bffa15 	stw	r2,-24(fp)
    28f0:	e0bff817 	ldw	r2,-32(fp)
    28f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28f8:	e0bff617 	ldw	r2,-40(fp)
    28fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    2900:	e0bffa17 	ldw	r2,-24(fp)
}
    2904:	e037883a 	mov	sp,fp
    2908:	dfc00117 	ldw	ra,4(sp)
    290c:	df000017 	ldw	fp,0(sp)
    2910:	dec00204 	addi	sp,sp,8
    2914:	f800283a 	ret

00002918 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2918:	defff904 	addi	sp,sp,-28
    291c:	dfc00615 	stw	ra,24(sp)
    2920:	df000515 	stw	fp,20(sp)
    2924:	df000504 	addi	fp,sp,20
    2928:	e13ffc15 	stw	r4,-16(fp)
    292c:	e17ffd15 	stw	r5,-12(fp)
    2930:	e1bffe15 	stw	r6,-8(fp)
    2934:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2938:	e13ffd17 	ldw	r4,-12(fp)
    293c:	e17ffe17 	ldw	r5,-8(fp)
    2940:	e1bfff17 	ldw	r6,-4(fp)
    2944:	0002b300 	call	2b30 <open>
    2948:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    294c:	e0bffb17 	ldw	r2,-20(fp)
    2950:	1004803a 	cmplt	r2,r2,zero
    2954:	10001c1e 	bne	r2,zero,29c8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    2958:	e0bffb17 	ldw	r2,-20(fp)
    295c:	00c00034 	movhi	r3,0
    2960:	18d24e04 	addi	r3,r3,18744
    2964:	10800324 	muli	r2,r2,12
    2968:	10c5883a 	add	r2,r2,r3
    296c:	10c00017 	ldw	r3,0(r2)
    2970:	e0bffc17 	ldw	r2,-16(fp)
    2974:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2978:	e0bffb17 	ldw	r2,-20(fp)
    297c:	00c00034 	movhi	r3,0
    2980:	18d24e04 	addi	r3,r3,18744
    2984:	10800324 	muli	r2,r2,12
    2988:	10c5883a 	add	r2,r2,r3
    298c:	10800104 	addi	r2,r2,4
    2990:	10c00017 	ldw	r3,0(r2)
    2994:	e0bffc17 	ldw	r2,-16(fp)
    2998:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    299c:	e0bffb17 	ldw	r2,-20(fp)
    29a0:	00c00034 	movhi	r3,0
    29a4:	18d24e04 	addi	r3,r3,18744
    29a8:	10800324 	muli	r2,r2,12
    29ac:	10c5883a 	add	r2,r2,r3
    29b0:	10800204 	addi	r2,r2,8
    29b4:	10c00017 	ldw	r3,0(r2)
    29b8:	e0bffc17 	ldw	r2,-16(fp)
    29bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    29c0:	e13ffb17 	ldw	r4,-20(fp)
    29c4:	0002d180 	call	2d18 <alt_release_fd>
  }
} 
    29c8:	e037883a 	mov	sp,fp
    29cc:	dfc00117 	ldw	ra,4(sp)
    29d0:	df000017 	ldw	fp,0(sp)
    29d4:	dec00204 	addi	sp,sp,8
    29d8:	f800283a 	ret

000029dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    29dc:	defffb04 	addi	sp,sp,-20
    29e0:	dfc00415 	stw	ra,16(sp)
    29e4:	df000315 	stw	fp,12(sp)
    29e8:	df000304 	addi	fp,sp,12
    29ec:	e13ffd15 	stw	r4,-12(fp)
    29f0:	e17ffe15 	stw	r5,-8(fp)
    29f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    29f8:	01000034 	movhi	r4,0
    29fc:	21125104 	addi	r4,r4,18756
    2a00:	e17ffd17 	ldw	r5,-12(fp)
    2a04:	01800044 	movi	r6,1
    2a08:	01c07fc4 	movi	r7,511
    2a0c:	00029180 	call	2918 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2a10:	01000034 	movhi	r4,0
    2a14:	21124e04 	addi	r4,r4,18744
    2a18:	e17ffe17 	ldw	r5,-8(fp)
    2a1c:	000d883a 	mov	r6,zero
    2a20:	01c07fc4 	movi	r7,511
    2a24:	00029180 	call	2918 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2a28:	01000034 	movhi	r4,0
    2a2c:	21125404 	addi	r4,r4,18768
    2a30:	e17fff17 	ldw	r5,-4(fp)
    2a34:	01800044 	movi	r6,1
    2a38:	01c07fc4 	movi	r7,511
    2a3c:	00029180 	call	2918 <alt_open_fd>
}  
    2a40:	e037883a 	mov	sp,fp
    2a44:	dfc00117 	ldw	ra,4(sp)
    2a48:	df000017 	ldw	fp,0(sp)
    2a4c:	dec00204 	addi	sp,sp,8
    2a50:	f800283a 	ret

00002a54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2a54:	defffc04 	addi	sp,sp,-16
    2a58:	df000315 	stw	fp,12(sp)
    2a5c:	df000304 	addi	fp,sp,12
    2a60:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2a64:	e0bffe17 	ldw	r2,-8(fp)
    2a68:	10800217 	ldw	r2,8(r2)
    2a6c:	10d00034 	orhi	r3,r2,16384
    2a70:	e0bffe17 	ldw	r2,-8(fp)
    2a74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2a78:	e03ffd15 	stw	zero,-12(fp)
    2a7c:	00002006 	br	2b00 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2a80:	e0bffd17 	ldw	r2,-12(fp)
    2a84:	00c00034 	movhi	r3,0
    2a88:	18d24e04 	addi	r3,r3,18744
    2a8c:	10800324 	muli	r2,r2,12
    2a90:	10c5883a 	add	r2,r2,r3
    2a94:	10c00017 	ldw	r3,0(r2)
    2a98:	e0bffe17 	ldw	r2,-8(fp)
    2a9c:	10800017 	ldw	r2,0(r2)
    2aa0:	1880141e 	bne	r3,r2,2af4 <alt_file_locked+0xa0>
    2aa4:	e0bffd17 	ldw	r2,-12(fp)
    2aa8:	00c00034 	movhi	r3,0
    2aac:	18d24e04 	addi	r3,r3,18744
    2ab0:	10800324 	muli	r2,r2,12
    2ab4:	10c5883a 	add	r2,r2,r3
    2ab8:	10800204 	addi	r2,r2,8
    2abc:	10800017 	ldw	r2,0(r2)
    2ac0:	1004403a 	cmpge	r2,r2,zero
    2ac4:	10000b1e 	bne	r2,zero,2af4 <alt_file_locked+0xa0>
    2ac8:	e0bffd17 	ldw	r2,-12(fp)
    2acc:	10800324 	muli	r2,r2,12
    2ad0:	1007883a 	mov	r3,r2
    2ad4:	00800034 	movhi	r2,0
    2ad8:	10924e04 	addi	r2,r2,18744
    2adc:	1887883a 	add	r3,r3,r2
    2ae0:	e0bffe17 	ldw	r2,-8(fp)
    2ae4:	18800326 	beq	r3,r2,2af4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2ae8:	00bffcc4 	movi	r2,-13
    2aec:	e0bfff15 	stw	r2,-4(fp)
    2af0:	00000a06 	br	2b1c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2af4:	e0bffd17 	ldw	r2,-12(fp)
    2af8:	10800044 	addi	r2,r2,1
    2afc:	e0bffd15 	stw	r2,-12(fp)
    2b00:	00800034 	movhi	r2,0
    2b04:	1093b204 	addi	r2,r2,20168
    2b08:	10800017 	ldw	r2,0(r2)
    2b0c:	1007883a 	mov	r3,r2
    2b10:	e0bffd17 	ldw	r2,-12(fp)
    2b14:	18bfda2e 	bgeu	r3,r2,2a80 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2b18:	e03fff15 	stw	zero,-4(fp)
    2b1c:	e0bfff17 	ldw	r2,-4(fp)
}
    2b20:	e037883a 	mov	sp,fp
    2b24:	df000017 	ldw	fp,0(sp)
    2b28:	dec00104 	addi	sp,sp,4
    2b2c:	f800283a 	ret

00002b30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2b30:	defff404 	addi	sp,sp,-48
    2b34:	dfc00b15 	stw	ra,44(sp)
    2b38:	df000a15 	stw	fp,40(sp)
    2b3c:	df000a04 	addi	fp,sp,40
    2b40:	e13ffb15 	stw	r4,-20(fp)
    2b44:	e17ffc15 	stw	r5,-16(fp)
    2b48:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2b4c:	00bfffc4 	movi	r2,-1
    2b50:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    2b54:	00bffb44 	movi	r2,-19
    2b58:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    2b5c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2b60:	e13ffb17 	ldw	r4,-20(fp)
    2b64:	01400034 	movhi	r5,0
    2b68:	2953b004 	addi	r5,r5,20160
    2b6c:	00025880 	call	2588 <alt_find_dev>
    2b70:	e0bffa15 	stw	r2,-24(fp)
    2b74:	e0bffa17 	ldw	r2,-24(fp)
    2b78:	1004c03a 	cmpne	r2,r2,zero
    2b7c:	1000051e 	bne	r2,zero,2b94 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2b80:	e13ffb17 	ldw	r4,-20(fp)
    2b84:	0002f3c0 	call	2f3c <alt_find_file>
    2b88:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    2b8c:	00800044 	movi	r2,1
    2b90:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2b94:	e0bffa17 	ldw	r2,-24(fp)
    2b98:	1005003a 	cmpeq	r2,r2,zero
    2b9c:	1000301e 	bne	r2,zero,2c60 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2ba0:	e13ffa17 	ldw	r4,-24(fp)
    2ba4:	000305c0 	call	305c <alt_get_fd>
    2ba8:	e0bff815 	stw	r2,-32(fp)
    2bac:	e0bff817 	ldw	r2,-32(fp)
    2bb0:	1004403a 	cmpge	r2,r2,zero
    2bb4:	1000031e 	bne	r2,zero,2bc4 <open+0x94>
    {
      status = index;
    2bb8:	e0bff817 	ldw	r2,-32(fp)
    2bbc:	e0bff715 	stw	r2,-36(fp)
    2bc0:	00002906 	br	2c68 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    2bc4:	e0bff817 	ldw	r2,-32(fp)
    2bc8:	10800324 	muli	r2,r2,12
    2bcc:	1007883a 	mov	r3,r2
    2bd0:	00800034 	movhi	r2,0
    2bd4:	10924e04 	addi	r2,r2,18744
    2bd8:	1885883a 	add	r2,r3,r2
    2bdc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2be0:	e0fffc17 	ldw	r3,-16(fp)
    2be4:	00900034 	movhi	r2,16384
    2be8:	10bfffc4 	addi	r2,r2,-1
    2bec:	1886703a 	and	r3,r3,r2
    2bf0:	e0bff917 	ldw	r2,-28(fp)
    2bf4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2bf8:	e0bff617 	ldw	r2,-40(fp)
    2bfc:	1004c03a 	cmpne	r2,r2,zero
    2c00:	1000061e 	bne	r2,zero,2c1c <open+0xec>
    2c04:	e13ff917 	ldw	r4,-28(fp)
    2c08:	0002a540 	call	2a54 <alt_file_locked>
    2c0c:	e0bff715 	stw	r2,-36(fp)
    2c10:	e0bff717 	ldw	r2,-36(fp)
    2c14:	1004803a 	cmplt	r2,r2,zero
    2c18:	1000131e 	bne	r2,zero,2c68 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2c1c:	e0bffa17 	ldw	r2,-24(fp)
    2c20:	10800317 	ldw	r2,12(r2)
    2c24:	1005003a 	cmpeq	r2,r2,zero
    2c28:	1000091e 	bne	r2,zero,2c50 <open+0x120>
    2c2c:	e0bffa17 	ldw	r2,-24(fp)
    2c30:	10800317 	ldw	r2,12(r2)
    2c34:	e13ff917 	ldw	r4,-28(fp)
    2c38:	e17ffb17 	ldw	r5,-20(fp)
    2c3c:	e1bffc17 	ldw	r6,-16(fp)
    2c40:	e1fffd17 	ldw	r7,-12(fp)
    2c44:	103ee83a 	callr	r2
    2c48:	e0bfff15 	stw	r2,-4(fp)
    2c4c:	00000106 	br	2c54 <open+0x124>
    2c50:	e03fff15 	stw	zero,-4(fp)
    2c54:	e0bfff17 	ldw	r2,-4(fp)
    2c58:	e0bff715 	stw	r2,-36(fp)
    2c5c:	00000206 	br	2c68 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2c60:	00bffb44 	movi	r2,-19
    2c64:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2c68:	e0bff717 	ldw	r2,-36(fp)
    2c6c:	1004403a 	cmpge	r2,r2,zero
    2c70:	1000091e 	bne	r2,zero,2c98 <open+0x168>
  {
    alt_release_fd (index);  
    2c74:	e13ff817 	ldw	r4,-32(fp)
    2c78:	0002d180 	call	2d18 <alt_release_fd>
    ALT_ERRNO = -status;
    2c7c:	0002cb80 	call	2cb8 <alt_get_errno>
    2c80:	e0fff717 	ldw	r3,-36(fp)
    2c84:	00c7c83a 	sub	r3,zero,r3
    2c88:	10c00015 	stw	r3,0(r2)
    return -1;
    2c8c:	00bfffc4 	movi	r2,-1
    2c90:	e0bffe15 	stw	r2,-8(fp)
    2c94:	00000206 	br	2ca0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    2c98:	e0bff817 	ldw	r2,-32(fp)
    2c9c:	e0bffe15 	stw	r2,-8(fp)
    2ca0:	e0bffe17 	ldw	r2,-8(fp)
}
    2ca4:	e037883a 	mov	sp,fp
    2ca8:	dfc00117 	ldw	ra,4(sp)
    2cac:	df000017 	ldw	fp,0(sp)
    2cb0:	dec00204 	addi	sp,sp,8
    2cb4:	f800283a 	ret

00002cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2cb8:	defffd04 	addi	sp,sp,-12
    2cbc:	dfc00215 	stw	ra,8(sp)
    2cc0:	df000115 	stw	fp,4(sp)
    2cc4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2cc8:	00800034 	movhi	r2,0
    2ccc:	1093b304 	addi	r2,r2,20172
    2cd0:	10800017 	ldw	r2,0(r2)
    2cd4:	1005003a 	cmpeq	r2,r2,zero
    2cd8:	1000061e 	bne	r2,zero,2cf4 <alt_get_errno+0x3c>
    2cdc:	00800034 	movhi	r2,0
    2ce0:	1093b304 	addi	r2,r2,20172
    2ce4:	10800017 	ldw	r2,0(r2)
    2ce8:	103ee83a 	callr	r2
    2cec:	e0bfff15 	stw	r2,-4(fp)
    2cf0:	00000306 	br	2d00 <alt_get_errno+0x48>
    2cf4:	00800034 	movhi	r2,0
    2cf8:	10997e04 	addi	r2,r2,26104
    2cfc:	e0bfff15 	stw	r2,-4(fp)
    2d00:	e0bfff17 	ldw	r2,-4(fp)
}
    2d04:	e037883a 	mov	sp,fp
    2d08:	dfc00117 	ldw	ra,4(sp)
    2d0c:	df000017 	ldw	fp,0(sp)
    2d10:	dec00204 	addi	sp,sp,8
    2d14:	f800283a 	ret

00002d18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2d18:	defffe04 	addi	sp,sp,-8
    2d1c:	df000115 	stw	fp,4(sp)
    2d20:	df000104 	addi	fp,sp,4
    2d24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2d28:	e0bfff17 	ldw	r2,-4(fp)
    2d2c:	108000d0 	cmplti	r2,r2,3
    2d30:	10000d1e 	bne	r2,zero,2d68 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2d34:	e0bfff17 	ldw	r2,-4(fp)
    2d38:	00c00034 	movhi	r3,0
    2d3c:	18d24e04 	addi	r3,r3,18744
    2d40:	10800324 	muli	r2,r2,12
    2d44:	10c5883a 	add	r2,r2,r3
    2d48:	10800204 	addi	r2,r2,8
    2d4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2d50:	e0bfff17 	ldw	r2,-4(fp)
    2d54:	00c00034 	movhi	r3,0
    2d58:	18d24e04 	addi	r3,r3,18744
    2d5c:	10800324 	muli	r2,r2,12
    2d60:	10c5883a 	add	r2,r2,r3
    2d64:	10000015 	stw	zero,0(r2)
  }
}
    2d68:	e037883a 	mov	sp,fp
    2d6c:	df000017 	ldw	fp,0(sp)
    2d70:	dec00104 	addi	sp,sp,4
    2d74:	f800283a 	ret

00002d78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2d78:	defffa04 	addi	sp,sp,-24
    2d7c:	df000515 	stw	fp,20(sp)
    2d80:	df000504 	addi	fp,sp,20
    2d84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d88:	0005303a 	rdctl	r2,status
    2d8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d90:	e0fffd17 	ldw	r3,-12(fp)
    2d94:	00bfff84 	movi	r2,-2
    2d98:	1884703a 	and	r2,r3,r2
    2d9c:	1001703a 	wrctl	status,r2
  
  return context;
    2da0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2da4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    2da8:	e0bfff17 	ldw	r2,-4(fp)
    2dac:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2db0:	e0bffc17 	ldw	r2,-16(fp)
    2db4:	10c00017 	ldw	r3,0(r2)
    2db8:	e0bffc17 	ldw	r2,-16(fp)
    2dbc:	10800117 	ldw	r2,4(r2)
    2dc0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2dc4:	e0bffc17 	ldw	r2,-16(fp)
    2dc8:	10c00117 	ldw	r3,4(r2)
    2dcc:	e0bffc17 	ldw	r2,-16(fp)
    2dd0:	10800017 	ldw	r2,0(r2)
    2dd4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2dd8:	e0fffc17 	ldw	r3,-16(fp)
    2ddc:	e0bffc17 	ldw	r2,-16(fp)
    2de0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    2de4:	e0fffc17 	ldw	r3,-16(fp)
    2de8:	e0bffc17 	ldw	r2,-16(fp)
    2dec:	18800015 	stw	r2,0(r3)
    2df0:	e0bffe17 	ldw	r2,-8(fp)
    2df4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2df8:	e0bffb17 	ldw	r2,-20(fp)
    2dfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2e00:	e037883a 	mov	sp,fp
    2e04:	df000017 	ldw	fp,0(sp)
    2e08:	dec00104 	addi	sp,sp,4
    2e0c:	f800283a 	ret

00002e10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2e10:	defffb04 	addi	sp,sp,-20
    2e14:	dfc00415 	stw	ra,16(sp)
    2e18:	df000315 	stw	fp,12(sp)
    2e1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2e20:	d0a00717 	ldw	r2,-32740(gp)
    2e24:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2e28:	d0a5cf17 	ldw	r2,-26820(gp)
    2e2c:	10800044 	addi	r2,r2,1
    2e30:	d0a5cf15 	stw	r2,-26820(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2e34:	00003106 	br	2efc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    2e38:	e0bffe17 	ldw	r2,-8(fp)
    2e3c:	10800017 	ldw	r2,0(r2)
    2e40:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2e44:	e0bffe17 	ldw	r2,-8(fp)
    2e48:	10800403 	ldbu	r2,16(r2)
    2e4c:	10803fcc 	andi	r2,r2,255
    2e50:	1005003a 	cmpeq	r2,r2,zero
    2e54:	1000051e 	bne	r2,zero,2e6c <alt_tick+0x5c>
    2e58:	d0a5cf17 	ldw	r2,-26820(gp)
    2e5c:	1004c03a 	cmpne	r2,r2,zero
    2e60:	1000021e 	bne	r2,zero,2e6c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    2e64:	e0bffe17 	ldw	r2,-8(fp)
    2e68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2e6c:	e0bffe17 	ldw	r2,-8(fp)
    2e70:	10c00217 	ldw	r3,8(r2)
    2e74:	d0a5cf17 	ldw	r2,-26820(gp)
    2e78:	10c01e36 	bltu	r2,r3,2ef4 <alt_tick+0xe4>
    2e7c:	e0bffe17 	ldw	r2,-8(fp)
    2e80:	10800403 	ldbu	r2,16(r2)
    2e84:	10803fcc 	andi	r2,r2,255
    2e88:	1004c03a 	cmpne	r2,r2,zero
    2e8c:	1000191e 	bne	r2,zero,2ef4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    2e90:	e0bffe17 	ldw	r2,-8(fp)
    2e94:	10c00317 	ldw	r3,12(r2)
    2e98:	e0bffe17 	ldw	r2,-8(fp)
    2e9c:	11000517 	ldw	r4,20(r2)
    2ea0:	183ee83a 	callr	r3
    2ea4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2ea8:	e0bffd17 	ldw	r2,-12(fp)
    2eac:	1004c03a 	cmpne	r2,r2,zero
    2eb0:	1000031e 	bne	r2,zero,2ec0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    2eb4:	e13ffe17 	ldw	r4,-8(fp)
    2eb8:	0002d780 	call	2d78 <alt_alarm_stop>
    2ebc:	00000d06 	br	2ef4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    2ec0:	e0bffe17 	ldw	r2,-8(fp)
    2ec4:	10c00217 	ldw	r3,8(r2)
    2ec8:	e0bffd17 	ldw	r2,-12(fp)
    2ecc:	1887883a 	add	r3,r3,r2
    2ed0:	e0bffe17 	ldw	r2,-8(fp)
    2ed4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2ed8:	e0bffe17 	ldw	r2,-8(fp)
    2edc:	10c00217 	ldw	r3,8(r2)
    2ee0:	d0a5cf17 	ldw	r2,-26820(gp)
    2ee4:	1880032e 	bgeu	r3,r2,2ef4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    2ee8:	e0fffe17 	ldw	r3,-8(fp)
    2eec:	00800044 	movi	r2,1
    2ef0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    2ef4:	e0bfff17 	ldw	r2,-4(fp)
    2ef8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2efc:	d0e00704 	addi	r3,gp,-32740
    2f00:	e0bffe17 	ldw	r2,-8(fp)
    2f04:	10ffcc1e 	bne	r2,r3,2e38 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2f08:	e037883a 	mov	sp,fp
    2f0c:	dfc00117 	ldw	ra,4(sp)
    2f10:	df000017 	ldw	fp,0(sp)
    2f14:	dec00204 	addi	sp,sp,8
    2f18:	f800283a 	ret

00002f1c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2f1c:	deffff04 	addi	sp,sp,-4
    2f20:	df000015 	stw	fp,0(sp)
    2f24:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2f28:	000170fa 	wrctl	ienable,zero
}
    2f2c:	e037883a 	mov	sp,fp
    2f30:	df000017 	ldw	fp,0(sp)
    2f34:	dec00104 	addi	sp,sp,4
    2f38:	f800283a 	ret

00002f3c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2f3c:	defffa04 	addi	sp,sp,-24
    2f40:	dfc00515 	stw	ra,20(sp)
    2f44:	df000415 	stw	fp,16(sp)
    2f48:	df000404 	addi	fp,sp,16
    2f4c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2f50:	00800034 	movhi	r2,0
    2f54:	1093ae04 	addi	r2,r2,20152
    2f58:	10800017 	ldw	r2,0(r2)
    2f5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2f60:	00003306 	br	3030 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    2f64:	e0bffd17 	ldw	r2,-12(fp)
    2f68:	11000217 	ldw	r4,8(r2)
    2f6c:	00033200 	call	3320 <strlen>
    2f70:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    2f74:	e0bffd17 	ldw	r2,-12(fp)
    2f78:	10c00217 	ldw	r3,8(r2)
    2f7c:	e0bffc17 	ldw	r2,-16(fp)
    2f80:	1885883a 	add	r2,r3,r2
    2f84:	10bfffc4 	addi	r2,r2,-1
    2f88:	10800003 	ldbu	r2,0(r2)
    2f8c:	10803fcc 	andi	r2,r2,255
    2f90:	1080201c 	xori	r2,r2,128
    2f94:	10bfe004 	addi	r2,r2,-128
    2f98:	10800bd8 	cmpnei	r2,r2,47
    2f9c:	1000031e 	bne	r2,zero,2fac <alt_find_file+0x70>
    {
      len -= 1;
    2fa0:	e0bffc17 	ldw	r2,-16(fp)
    2fa4:	10bfffc4 	addi	r2,r2,-1
    2fa8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2fac:	e0bffc17 	ldw	r2,-16(fp)
    2fb0:	1007883a 	mov	r3,r2
    2fb4:	e0bffe17 	ldw	r2,-8(fp)
    2fb8:	1885883a 	add	r2,r3,r2
    2fbc:	10800003 	ldbu	r2,0(r2)
    2fc0:	10803fcc 	andi	r2,r2,255
    2fc4:	1080201c 	xori	r2,r2,128
    2fc8:	10bfe004 	addi	r2,r2,-128
    2fcc:	10800be0 	cmpeqi	r2,r2,47
    2fd0:	10000a1e 	bne	r2,zero,2ffc <alt_find_file+0xc0>
    2fd4:	e0bffc17 	ldw	r2,-16(fp)
    2fd8:	1007883a 	mov	r3,r2
    2fdc:	e0bffe17 	ldw	r2,-8(fp)
    2fe0:	1885883a 	add	r2,r3,r2
    2fe4:	10800003 	ldbu	r2,0(r2)
    2fe8:	10803fcc 	andi	r2,r2,255
    2fec:	1080201c 	xori	r2,r2,128
    2ff0:	10bfe004 	addi	r2,r2,-128
    2ff4:	1004c03a 	cmpne	r2,r2,zero
    2ff8:	10000a1e 	bne	r2,zero,3024 <alt_find_file+0xe8>
    2ffc:	e0bffd17 	ldw	r2,-12(fp)
    3000:	11000217 	ldw	r4,8(r2)
    3004:	e1bffc17 	ldw	r6,-16(fp)
    3008:	e17ffe17 	ldw	r5,-8(fp)
    300c:	00031f00 	call	31f0 <memcmp>
    3010:	1004c03a 	cmpne	r2,r2,zero
    3014:	1000031e 	bne	r2,zero,3024 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3018:	e0bffd17 	ldw	r2,-12(fp)
    301c:	e0bfff15 	stw	r2,-4(fp)
    3020:	00000806 	br	3044 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    3024:	e0bffd17 	ldw	r2,-12(fp)
    3028:	10800017 	ldw	r2,0(r2)
    302c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3030:	00c00034 	movhi	r3,0
    3034:	18d3ae04 	addi	r3,r3,20152
    3038:	e0bffd17 	ldw	r2,-12(fp)
    303c:	10ffc91e 	bne	r2,r3,2f64 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3040:	e03fff15 	stw	zero,-4(fp)
    3044:	e0bfff17 	ldw	r2,-4(fp)
}
    3048:	e037883a 	mov	sp,fp
    304c:	dfc00117 	ldw	ra,4(sp)
    3050:	df000017 	ldw	fp,0(sp)
    3054:	dec00204 	addi	sp,sp,8
    3058:	f800283a 	ret

0000305c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    305c:	defffc04 	addi	sp,sp,-16
    3060:	df000315 	stw	fp,12(sp)
    3064:	df000304 	addi	fp,sp,12
    3068:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    306c:	00bffa04 	movi	r2,-24
    3070:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3074:	e03ffe15 	stw	zero,-8(fp)
    3078:	00001e06 	br	30f4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    307c:	e0bffe17 	ldw	r2,-8(fp)
    3080:	00c00034 	movhi	r3,0
    3084:	18d24e04 	addi	r3,r3,18744
    3088:	10800324 	muli	r2,r2,12
    308c:	10c5883a 	add	r2,r2,r3
    3090:	10800017 	ldw	r2,0(r2)
    3094:	1004c03a 	cmpne	r2,r2,zero
    3098:	1000131e 	bne	r2,zero,30e8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    309c:	e0bffe17 	ldw	r2,-8(fp)
    30a0:	00c00034 	movhi	r3,0
    30a4:	18d24e04 	addi	r3,r3,18744
    30a8:	10800324 	muli	r2,r2,12
    30ac:	10c7883a 	add	r3,r2,r3
    30b0:	e0bfff17 	ldw	r2,-4(fp)
    30b4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    30b8:	00800034 	movhi	r2,0
    30bc:	1093b204 	addi	r2,r2,20168
    30c0:	10c00017 	ldw	r3,0(r2)
    30c4:	e0bffe17 	ldw	r2,-8(fp)
    30c8:	1880040e 	bge	r3,r2,30dc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    30cc:	00c00034 	movhi	r3,0
    30d0:	18d3b204 	addi	r3,r3,20168
    30d4:	e0bffe17 	ldw	r2,-8(fp)
    30d8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    30dc:	e0bffe17 	ldw	r2,-8(fp)
    30e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    30e4:	00000606 	br	3100 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    30e8:	e0bffe17 	ldw	r2,-8(fp)
    30ec:	10800044 	addi	r2,r2,1
    30f0:	e0bffe15 	stw	r2,-8(fp)
    30f4:	e0bffe17 	ldw	r2,-8(fp)
    30f8:	10800810 	cmplti	r2,r2,32
    30fc:	103fdf1e 	bne	r2,zero,307c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3100:	e0bffd17 	ldw	r2,-12(fp)
}
    3104:	e037883a 	mov	sp,fp
    3108:	df000017 	ldw	fp,0(sp)
    310c:	dec00104 	addi	sp,sp,4
    3110:	f800283a 	ret

00003114 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3114:	defffb04 	addi	sp,sp,-20
    3118:	df000415 	stw	fp,16(sp)
    311c:	df000404 	addi	fp,sp,16
    3120:	e13ffe15 	stw	r4,-8(fp)
    3124:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3128:	e0bfff17 	ldw	r2,-4(fp)
    312c:	10840070 	cmpltui	r2,r2,4097
    3130:	1000021e 	bne	r2,zero,313c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3134:	00840004 	movi	r2,4096
    3138:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    313c:	e0fffe17 	ldw	r3,-8(fp)
    3140:	e0bfff17 	ldw	r2,-4(fp)
    3144:	1885883a 	add	r2,r3,r2
    3148:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    314c:	e0bffe17 	ldw	r2,-8(fp)
    3150:	e0bffd15 	stw	r2,-12(fp)
    3154:	00000506 	br	316c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3158:	e0bffd17 	ldw	r2,-12(fp)
    315c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3160:	e0bffd17 	ldw	r2,-12(fp)
    3164:	10800804 	addi	r2,r2,32
    3168:	e0bffd15 	stw	r2,-12(fp)
    316c:	e0fffd17 	ldw	r3,-12(fp)
    3170:	e0bffc17 	ldw	r2,-16(fp)
    3174:	18bff836 	bltu	r3,r2,3158 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3178:	e0bffe17 	ldw	r2,-8(fp)
    317c:	108007cc 	andi	r2,r2,31
    3180:	1005003a 	cmpeq	r2,r2,zero
    3184:	1000021e 	bne	r2,zero,3190 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3188:	e0bffd17 	ldw	r2,-12(fp)
    318c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3190:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3194:	e037883a 	mov	sp,fp
    3198:	df000017 	ldw	fp,0(sp)
    319c:	dec00104 	addi	sp,sp,4
    31a0:	f800283a 	ret

000031a4 <atexit>:
    31a4:	200b883a 	mov	r5,r4
    31a8:	000d883a 	mov	r6,zero
    31ac:	0009883a 	mov	r4,zero
    31b0:	000f883a 	mov	r7,zero
    31b4:	00033941 	jmpi	3394 <__register_exitproc>

000031b8 <exit>:
    31b8:	defffe04 	addi	sp,sp,-8
    31bc:	000b883a 	mov	r5,zero
    31c0:	dc000015 	stw	r16,0(sp)
    31c4:	dfc00115 	stw	ra,4(sp)
    31c8:	2021883a 	mov	r16,r4
    31cc:	00034cc0 	call	34cc <__call_exitprocs>
    31d0:	00800034 	movhi	r2,0
    31d4:	1093b804 	addi	r2,r2,20192
    31d8:	11000017 	ldw	r4,0(r2)
    31dc:	20800f17 	ldw	r2,60(r4)
    31e0:	10000126 	beq	r2,zero,31e8 <exit+0x30>
    31e4:	103ee83a 	callr	r2
    31e8:	8009883a 	mov	r4,r16
    31ec:	00036bc0 	call	36bc <_exit>

000031f0 <memcmp>:
    31f0:	00c000c4 	movi	r3,3
    31f4:	1980032e 	bgeu	r3,r6,3204 <memcmp+0x14>
    31f8:	2144b03a 	or	r2,r4,r5
    31fc:	10c4703a 	and	r2,r2,r3
    3200:	10000f26 	beq	r2,zero,3240 <memcmp+0x50>
    3204:	31ffffc4 	addi	r7,r6,-1
    3208:	3000061e 	bne	r6,zero,3224 <memcmp+0x34>
    320c:	00000a06 	br	3238 <memcmp+0x48>
    3210:	39ffffc4 	addi	r7,r7,-1
    3214:	00bfffc4 	movi	r2,-1
    3218:	21000044 	addi	r4,r4,1
    321c:	29400044 	addi	r5,r5,1
    3220:	38800526 	beq	r7,r2,3238 <memcmp+0x48>
    3224:	20c00003 	ldbu	r3,0(r4)
    3228:	28800003 	ldbu	r2,0(r5)
    322c:	18bff826 	beq	r3,r2,3210 <memcmp+0x20>
    3230:	1885c83a 	sub	r2,r3,r2
    3234:	f800283a 	ret
    3238:	0005883a 	mov	r2,zero
    323c:	f800283a 	ret
    3240:	180f883a 	mov	r7,r3
    3244:	20c00017 	ldw	r3,0(r4)
    3248:	28800017 	ldw	r2,0(r5)
    324c:	18bfed1e 	bne	r3,r2,3204 <memcmp+0x14>
    3250:	31bfff04 	addi	r6,r6,-4
    3254:	21000104 	addi	r4,r4,4
    3258:	29400104 	addi	r5,r5,4
    325c:	39bff936 	bltu	r7,r6,3244 <memcmp+0x54>
    3260:	003fe806 	br	3204 <memcmp+0x14>

00003264 <strcmp>:
    3264:	2144b03a 	or	r2,r4,r5
    3268:	108000cc 	andi	r2,r2,3
    326c:	10001d1e 	bne	r2,zero,32e4 <strcmp+0x80>
    3270:	200f883a 	mov	r7,r4
    3274:	28800017 	ldw	r2,0(r5)
    3278:	21000017 	ldw	r4,0(r4)
    327c:	280d883a 	mov	r6,r5
    3280:	2080161e 	bne	r4,r2,32dc <strcmp+0x78>
    3284:	023fbff4 	movhi	r8,65279
    3288:	423fbfc4 	addi	r8,r8,-257
    328c:	2207883a 	add	r3,r4,r8
    3290:	01602074 	movhi	r5,32897
    3294:	29602004 	addi	r5,r5,-32640
    3298:	1946703a 	and	r3,r3,r5
    329c:	0104303a 	nor	r2,zero,r4
    32a0:	10c4703a 	and	r2,r2,r3
    32a4:	10001c1e 	bne	r2,zero,3318 <strcmp+0xb4>
    32a8:	4013883a 	mov	r9,r8
    32ac:	2811883a 	mov	r8,r5
    32b0:	00000106 	br	32b8 <strcmp+0x54>
    32b4:	1800181e 	bne	r3,zero,3318 <strcmp+0xb4>
    32b8:	39c00104 	addi	r7,r7,4
    32bc:	39000017 	ldw	r4,0(r7)
    32c0:	31800104 	addi	r6,r6,4
    32c4:	31400017 	ldw	r5,0(r6)
    32c8:	2245883a 	add	r2,r4,r9
    32cc:	1204703a 	and	r2,r2,r8
    32d0:	0106303a 	nor	r3,zero,r4
    32d4:	1886703a 	and	r3,r3,r2
    32d8:	217ff626 	beq	r4,r5,32b4 <strcmp+0x50>
    32dc:	3809883a 	mov	r4,r7
    32e0:	300b883a 	mov	r5,r6
    32e4:	20c00007 	ldb	r3,0(r4)
    32e8:	1800051e 	bne	r3,zero,3300 <strcmp+0x9c>
    32ec:	00000606 	br	3308 <strcmp+0xa4>
    32f0:	21000044 	addi	r4,r4,1
    32f4:	20c00007 	ldb	r3,0(r4)
    32f8:	29400044 	addi	r5,r5,1
    32fc:	18000226 	beq	r3,zero,3308 <strcmp+0xa4>
    3300:	28800007 	ldb	r2,0(r5)
    3304:	18bffa26 	beq	r3,r2,32f0 <strcmp+0x8c>
    3308:	20c00003 	ldbu	r3,0(r4)
    330c:	28800003 	ldbu	r2,0(r5)
    3310:	1885c83a 	sub	r2,r3,r2
    3314:	f800283a 	ret
    3318:	0005883a 	mov	r2,zero
    331c:	f800283a 	ret

00003320 <strlen>:
    3320:	208000cc 	andi	r2,r4,3
    3324:	2011883a 	mov	r8,r4
    3328:	1000161e 	bne	r2,zero,3384 <strlen+0x64>
    332c:	20c00017 	ldw	r3,0(r4)
    3330:	017fbff4 	movhi	r5,65279
    3334:	297fbfc4 	addi	r5,r5,-257
    3338:	01e02074 	movhi	r7,32897
    333c:	39e02004 	addi	r7,r7,-32640
    3340:	1945883a 	add	r2,r3,r5
    3344:	11c4703a 	and	r2,r2,r7
    3348:	00c6303a 	nor	r3,zero,r3
    334c:	1886703a 	and	r3,r3,r2
    3350:	18000c1e 	bne	r3,zero,3384 <strlen+0x64>
    3354:	280d883a 	mov	r6,r5
    3358:	380b883a 	mov	r5,r7
    335c:	21000104 	addi	r4,r4,4
    3360:	20800017 	ldw	r2,0(r4)
    3364:	1187883a 	add	r3,r2,r6
    3368:	1946703a 	and	r3,r3,r5
    336c:	0084303a 	nor	r2,zero,r2
    3370:	10c4703a 	and	r2,r2,r3
    3374:	103ff926 	beq	r2,zero,335c <strlen+0x3c>
    3378:	20800007 	ldb	r2,0(r4)
    337c:	10000326 	beq	r2,zero,338c <strlen+0x6c>
    3380:	21000044 	addi	r4,r4,1
    3384:	20800007 	ldb	r2,0(r4)
    3388:	103ffd1e 	bne	r2,zero,3380 <strlen+0x60>
    338c:	2205c83a 	sub	r2,r4,r8
    3390:	f800283a 	ret

00003394 <__register_exitproc>:
    3394:	defffa04 	addi	sp,sp,-24
    3398:	00800034 	movhi	r2,0
    339c:	1093b804 	addi	r2,r2,20192
    33a0:	dc000015 	stw	r16,0(sp)
    33a4:	14000017 	ldw	r16,0(r2)
    33a8:	dd000415 	stw	r20,16(sp)
    33ac:	2829883a 	mov	r20,r5
    33b0:	81405217 	ldw	r5,328(r16)
    33b4:	dcc00315 	stw	r19,12(sp)
    33b8:	dc800215 	stw	r18,8(sp)
    33bc:	dc400115 	stw	r17,4(sp)
    33c0:	dfc00515 	stw	ra,20(sp)
    33c4:	2023883a 	mov	r17,r4
    33c8:	3027883a 	mov	r19,r6
    33cc:	3825883a 	mov	r18,r7
    33d0:	28002526 	beq	r5,zero,3468 <__register_exitproc+0xd4>
    33d4:	29000117 	ldw	r4,4(r5)
    33d8:	008007c4 	movi	r2,31
    33dc:	11002716 	blt	r2,r4,347c <__register_exitproc+0xe8>
    33e0:	8800101e 	bne	r17,zero,3424 <__register_exitproc+0x90>
    33e4:	2105883a 	add	r2,r4,r4
    33e8:	1085883a 	add	r2,r2,r2
    33ec:	20c00044 	addi	r3,r4,1
    33f0:	1145883a 	add	r2,r2,r5
    33f4:	0009883a 	mov	r4,zero
    33f8:	15000215 	stw	r20,8(r2)
    33fc:	28c00115 	stw	r3,4(r5)
    3400:	2005883a 	mov	r2,r4
    3404:	dfc00517 	ldw	ra,20(sp)
    3408:	dd000417 	ldw	r20,16(sp)
    340c:	dcc00317 	ldw	r19,12(sp)
    3410:	dc800217 	ldw	r18,8(sp)
    3414:	dc400117 	ldw	r17,4(sp)
    3418:	dc000017 	ldw	r16,0(sp)
    341c:	dec00604 	addi	sp,sp,24
    3420:	f800283a 	ret
    3424:	29802204 	addi	r6,r5,136
    3428:	00800044 	movi	r2,1
    342c:	110e983a 	sll	r7,r2,r4
    3430:	30c04017 	ldw	r3,256(r6)
    3434:	2105883a 	add	r2,r4,r4
    3438:	1085883a 	add	r2,r2,r2
    343c:	1185883a 	add	r2,r2,r6
    3440:	19c6b03a 	or	r3,r3,r7
    3444:	14802015 	stw	r18,128(r2)
    3448:	14c00015 	stw	r19,0(r2)
    344c:	00800084 	movi	r2,2
    3450:	30c04015 	stw	r3,256(r6)
    3454:	88bfe31e 	bne	r17,r2,33e4 <__register_exitproc+0x50>
    3458:	30804117 	ldw	r2,260(r6)
    345c:	11c4b03a 	or	r2,r2,r7
    3460:	30804115 	stw	r2,260(r6)
    3464:	003fdf06 	br	33e4 <__register_exitproc+0x50>
    3468:	00800034 	movhi	r2,0
    346c:	1099bf04 	addi	r2,r2,26364
    3470:	100b883a 	mov	r5,r2
    3474:	80805215 	stw	r2,328(r16)
    3478:	003fd606 	br	33d4 <__register_exitproc+0x40>
    347c:	00800034 	movhi	r2,0
    3480:	10800004 	addi	r2,r2,0
    3484:	1000021e 	bne	r2,zero,3490 <__register_exitproc+0xfc>
    3488:	013fffc4 	movi	r4,-1
    348c:	003fdc06 	br	3400 <__register_exitproc+0x6c>
    3490:	01006404 	movi	r4,400
    3494:	103ee83a 	callr	r2
    3498:	1007883a 	mov	r3,r2
    349c:	103ffa26 	beq	r2,zero,3488 <__register_exitproc+0xf4>
    34a0:	80805217 	ldw	r2,328(r16)
    34a4:	180b883a 	mov	r5,r3
    34a8:	18000115 	stw	zero,4(r3)
    34ac:	18800015 	stw	r2,0(r3)
    34b0:	80c05215 	stw	r3,328(r16)
    34b4:	18006215 	stw	zero,392(r3)
    34b8:	18006315 	stw	zero,396(r3)
    34bc:	0009883a 	mov	r4,zero
    34c0:	883fc826 	beq	r17,zero,33e4 <__register_exitproc+0x50>
    34c4:	003fd706 	br	3424 <__register_exitproc+0x90>

000034c8 <register_fini>:
    34c8:	f800283a 	ret

000034cc <__call_exitprocs>:
    34cc:	00800034 	movhi	r2,0
    34d0:	1093b804 	addi	r2,r2,20192
    34d4:	10800017 	ldw	r2,0(r2)
    34d8:	defff304 	addi	sp,sp,-52
    34dc:	df000b15 	stw	fp,44(sp)
    34e0:	d8800115 	stw	r2,4(sp)
    34e4:	00800034 	movhi	r2,0
    34e8:	10800004 	addi	r2,r2,0
    34ec:	1005003a 	cmpeq	r2,r2,zero
    34f0:	d8800215 	stw	r2,8(sp)
    34f4:	d8800117 	ldw	r2,4(sp)
    34f8:	dd400815 	stw	r21,32(sp)
    34fc:	dd000715 	stw	r20,28(sp)
    3500:	10805204 	addi	r2,r2,328
    3504:	dfc00c15 	stw	ra,48(sp)
    3508:	ddc00a15 	stw	r23,40(sp)
    350c:	dd800915 	stw	r22,36(sp)
    3510:	dcc00615 	stw	r19,24(sp)
    3514:	dc800515 	stw	r18,20(sp)
    3518:	dc400415 	stw	r17,16(sp)
    351c:	dc000315 	stw	r16,12(sp)
    3520:	282b883a 	mov	r21,r5
    3524:	2039883a 	mov	fp,r4
    3528:	d8800015 	stw	r2,0(sp)
    352c:	2829003a 	cmpeq	r20,r5,zero
    3530:	d8800117 	ldw	r2,4(sp)
    3534:	14405217 	ldw	r17,328(r2)
    3538:	88001026 	beq	r17,zero,357c <__call_exitprocs+0xb0>
    353c:	ddc00017 	ldw	r23,0(sp)
    3540:	88800117 	ldw	r2,4(r17)
    3544:	8c802204 	addi	r18,r17,136
    3548:	143fffc4 	addi	r16,r2,-1
    354c:	80000916 	blt	r16,zero,3574 <__call_exitprocs+0xa8>
    3550:	05bfffc4 	movi	r22,-1
    3554:	a000151e 	bne	r20,zero,35ac <__call_exitprocs+0xe0>
    3558:	8409883a 	add	r4,r16,r16
    355c:	2105883a 	add	r2,r4,r4
    3560:	1485883a 	add	r2,r2,r18
    3564:	10c02017 	ldw	r3,128(r2)
    3568:	a8c01126 	beq	r21,r3,35b0 <__call_exitprocs+0xe4>
    356c:	843fffc4 	addi	r16,r16,-1
    3570:	85bff81e 	bne	r16,r22,3554 <__call_exitprocs+0x88>
    3574:	d8800217 	ldw	r2,8(sp)
    3578:	10003126 	beq	r2,zero,3640 <__call_exitprocs+0x174>
    357c:	dfc00c17 	ldw	ra,48(sp)
    3580:	df000b17 	ldw	fp,44(sp)
    3584:	ddc00a17 	ldw	r23,40(sp)
    3588:	dd800917 	ldw	r22,36(sp)
    358c:	dd400817 	ldw	r21,32(sp)
    3590:	dd000717 	ldw	r20,28(sp)
    3594:	dcc00617 	ldw	r19,24(sp)
    3598:	dc800517 	ldw	r18,20(sp)
    359c:	dc400417 	ldw	r17,16(sp)
    35a0:	dc000317 	ldw	r16,12(sp)
    35a4:	dec00d04 	addi	sp,sp,52
    35a8:	f800283a 	ret
    35ac:	8409883a 	add	r4,r16,r16
    35b0:	88c00117 	ldw	r3,4(r17)
    35b4:	2105883a 	add	r2,r4,r4
    35b8:	1445883a 	add	r2,r2,r17
    35bc:	18ffffc4 	addi	r3,r3,-1
    35c0:	11800217 	ldw	r6,8(r2)
    35c4:	1c001526 	beq	r3,r16,361c <__call_exitprocs+0x150>
    35c8:	10000215 	stw	zero,8(r2)
    35cc:	303fe726 	beq	r6,zero,356c <__call_exitprocs+0xa0>
    35d0:	00c00044 	movi	r3,1
    35d4:	1c06983a 	sll	r3,r3,r16
    35d8:	90804017 	ldw	r2,256(r18)
    35dc:	8cc00117 	ldw	r19,4(r17)
    35e0:	1884703a 	and	r2,r3,r2
    35e4:	10001426 	beq	r2,zero,3638 <__call_exitprocs+0x16c>
    35e8:	90804117 	ldw	r2,260(r18)
    35ec:	1884703a 	and	r2,r3,r2
    35f0:	10000c1e 	bne	r2,zero,3624 <__call_exitprocs+0x158>
    35f4:	2105883a 	add	r2,r4,r4
    35f8:	1485883a 	add	r2,r2,r18
    35fc:	11400017 	ldw	r5,0(r2)
    3600:	e009883a 	mov	r4,fp
    3604:	303ee83a 	callr	r6
    3608:	88800117 	ldw	r2,4(r17)
    360c:	98bfc81e 	bne	r19,r2,3530 <__call_exitprocs+0x64>
    3610:	b8800017 	ldw	r2,0(r23)
    3614:	147fd526 	beq	r2,r17,356c <__call_exitprocs+0xa0>
    3618:	003fc506 	br	3530 <__call_exitprocs+0x64>
    361c:	8c000115 	stw	r16,4(r17)
    3620:	003fea06 	br	35cc <__call_exitprocs+0x100>
    3624:	2105883a 	add	r2,r4,r4
    3628:	1485883a 	add	r2,r2,r18
    362c:	11000017 	ldw	r4,0(r2)
    3630:	303ee83a 	callr	r6
    3634:	003ff406 	br	3608 <__call_exitprocs+0x13c>
    3638:	303ee83a 	callr	r6
    363c:	003ff206 	br	3608 <__call_exitprocs+0x13c>
    3640:	88800117 	ldw	r2,4(r17)
    3644:	1000081e 	bne	r2,zero,3668 <__call_exitprocs+0x19c>
    3648:	89000017 	ldw	r4,0(r17)
    364c:	20000726 	beq	r4,zero,366c <__call_exitprocs+0x1a0>
    3650:	b9000015 	stw	r4,0(r23)
    3654:	8809883a 	mov	r4,r17
    3658:	00000000 	call	0 <__alt_mem_SDRAM>
    365c:	bc400017 	ldw	r17,0(r23)
    3660:	883fb71e 	bne	r17,zero,3540 <__call_exitprocs+0x74>
    3664:	003fc506 	br	357c <__call_exitprocs+0xb0>
    3668:	89000017 	ldw	r4,0(r17)
    366c:	882f883a 	mov	r23,r17
    3670:	2023883a 	mov	r17,r4
    3674:	883fb21e 	bne	r17,zero,3540 <__call_exitprocs+0x74>
    3678:	003fc006 	br	357c <__call_exitprocs+0xb0>

0000367c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    367c:	defffd04 	addi	sp,sp,-12
    3680:	df000215 	stw	fp,8(sp)
    3684:	df000204 	addi	fp,sp,8
    3688:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    368c:	e0bfff17 	ldw	r2,-4(fp)
    3690:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3694:	e0bffe17 	ldw	r2,-8(fp)
    3698:	1005003a 	cmpeq	r2,r2,zero
    369c:	1000021e 	bne	r2,zero,36a8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    36a0:	002af070 	cmpltui	zero,zero,43969
    36a4:	00000106 	br	36ac <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    36a8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    36ac:	e037883a 	mov	sp,fp
    36b0:	df000017 	ldw	fp,0(sp)
    36b4:	dec00104 	addi	sp,sp,4
    36b8:	f800283a 	ret

000036bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    36bc:	defffd04 	addi	sp,sp,-12
    36c0:	dfc00215 	stw	ra,8(sp)
    36c4:	df000115 	stw	fp,4(sp)
    36c8:	df000104 	addi	fp,sp,4
    36cc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    36d0:	e13fff17 	ldw	r4,-4(fp)
    36d4:	000367c0 	call	367c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    36d8:	003fff06 	br	36d8 <_exit+0x1c>
    36dc:	000034c8 	cmpgei	zero,zero,211
